#!/bin/sh
#
# xedit configure script
#
# Copyright (c) 2018 成都东方盛行电子有限责任公司
#

# 当前脚本目录
CURRENT_PATH=$(cd "$(dirname "$0")";pwd)

source ${CURRENT_PATH}/script/pub.sh

# 目标库集合
LIBS="
    xutil
	xengine
"

# 显示帮助信息
show_help() {
    cat <<EOF
Usage: configure [options]
Options:
-h|--help                               print this message
--target-os=TARGET_OS                   build libraries running on TARGET_OS.Valid options are:
                                            iOS, Android, Windows
--arch=ARCH                             build libraries running on cpu ARCH.Valid options are:
                                            armv7, armv7s, arm64, x86_64 for iOS
                                            arm64-v8a, armeabi-v7a, x86, x86_64 for Android
                                            x86, x86_64 for Windows
--enable-debug                          enable debugging symbols
--prefix=PREFIX                         install in PREFIX [$PREFIX_DEFAULT]
--incdir=INC_DIR                        install includes in DIR [PREFIX/include]
--libdir=LIB_DIR                        install libs in DIR [PREFIX/lib]
--bindir=BIN_DIR                        install binaries in DIR [PREFIX/bin]
--extra-cflags=ECFLAGS                  add ECFLAGS to CFLAGS [$CFLAGS]
--extra-cxxflags=ECXXFLAGS              add ECXXFLAGS to CXXFLAGS [$CXXFLAGS]
--extra-ldflags=ELDFLAGS                add ELDFLAGS to LDFLAGS [$LDFLAGS]
--qt5-home=QT5_HOME                     set qt5 home directory
--build-dir=BUILD_DIR                   set build directory
EOF
    exit 0
}

# default installation paths
PREFIX_DEFAULT="${CURRENT_PATH}"

PREFIX=${PREFIX_DEFAULT}
BUILD_TYPE=Release

# 解析参数
for var in "$@"; do
    value=${var#*=}
    name=${var%"$value"}
    if test -z ${name}; then
        name=${value}
    fi

    case ${name} in
        -h|--help)
            show_help
            ;;
        --target-os=)
            TARGET_OS="${value}"
            ;;
        --arch=)
            ARCH="${value}"
            ;;
        --enable-debug)
            BUILD_TYPE=Debug
            ;;
        --prefix=)
            PREFIX="${value}"
            ;;
        --incdir=)
            INCDIR="${value}"
            ;;
        --libdir=)
            LIBDIR="${value}"
            ;;
        --bindir=)
            BINDIR="${value}"
            ;;
        --extra-cflags=)
            ECFLAGS="${value}"
            ;;
        --extra-cxxflags=)
            ECXXFLAGS="${value}"
            ;;
        --extra-ldflags=)
            ELDFLAGS="${value}"
            ;;
        --vs-version=)
            VS_VERSION="${value}"
            ;;
        --qt5-home=)
            QT5_HOME="${value}"
            ;;
        --build-dir=)
            BUILD_DIR="${value}"
            ;;
        *)
            echo "Unknown option '${name}'. Use -h option to see help information"
            die
    esac
done

if [ ! ${TARGET_OS} ]; then
    HOST_OS=$(get_host_os)
    test -z ${HOST_OS} && {
        echo "Target os not set.Please set target os use option --target-os."
        die
    }
    TARGET_OS=${HOST_OS}
fi

if [ ! ${ARCH} ]; then
    HOST_ARCH=$(get_host_cpu_arch)
    test -z ${HOST_ARCH} && {
        echo "Target architecture not set.Please set target os use option --arch."
        die
    }
    ARCH=${HOST_ARCH}
fi

if [ ! ${INCDIR} ]; then
    INCDIR="${PREFIX}/include"
fi

if [ ! ${LIBDIR} ]; then
    LIBDIR="${PREFIX}/lib"
fi

if [ ! ${BINDIR} ]; then
    BINDIR="${PREFIX}/bin"
fi

if [ ! ${BUILD_DIR} ]; then
    BUILD_DIR="${CURRENT_PATH}/CMakeFiles/${TARGET_OS}/${BUILD_TYPE}/${ARCH}"
fi


INCLUDE_OUTPUT_PATH=${INCDIR}
LIBRARY_OUTPUT_PATH=${LIBDIR}/${TARGET_OS}/${BUILD_TYPE}/${ARCH}
BINARY_OUTPUT_PATH=${BINDIR}/${TARGET_OS}/${BUILD_TYPE}/${ARCH}

# 写入cmake配置文件
CMAKE_CONFIG_FILE=${CURRENT_PATH}/config.cmake
cat > ${CMAKE_CONFIG_FILE} <<EOF
# Automatically generated by configure - do NOT modify!
set(LIBS ${LIBS})
set(TARGET_OS ${TARGET_OS})
set(ARCH ${ARCH})
set(INCDIR ${INCDIR})
set(LIBDIR ${LIBDIR})
set(CMAKE_BUILD_TYPE ${BUILD_TYPE})
set(LIBRARY_OUTPUT_PATH ${LIBRARY_OUTPUT_PATH})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
set(CMAKE_BINARY_DIR ${BUILD_DIR})
set(INCLUDE_OUTPUT_PATH ${INCLUDE_OUTPUT_PATH})
EOF

case ${TARGET_OS} in
    iOS)
        QT_BUILD_KIT=ios
        case ${ARCH} in
            armv7|armv7s|arm64)
                ECFLAGS="-mios-version-min=8.0 ${ECFLAGS}"
                ECXXFLAGS="-mios-version-min=8.0 ${ECXXFLAGS}"
                ;;
            i386|x86_64)
                ECFLAGS="-mios-simulator-version-min=8.0 ${ECFLAGS}"
                ECXXFLAGS="-mios-simulator-version-min=8.0 ${ECXXFLAGS}"
                ;;
            *)
                echo "Unsupported architecture ${ARCH}!"
                die
        esac
        ;;
    Android)
        check_android
        test $? == 0 || die

        case ${ARCH} in
            armeabi-v7a)
                QT_BUILD_KIT=android_armv7
                ;;
            arm64-v8a)
                QT_BUILD_KIT=android_arm64
                ;;
            x86)
                QT_BUILD_KIT=android_x86
                ;;
            x86_64)
                QT_BUILD_KIT=android_x86_64
                ;;
            *)
                echo "Unsupported architecture ${ARCH}!"
                die
        esac

        TOOLCHAIN_INCLUDE_DIR=$(get_android_toolchain_include_dir ${ARCH})
        if [ ! ${TOOLCHAIN_INCLUDE_DIR} ]; then
            echo "Can not find android toolchain include directory for architecture ${ARCH}."
            die
        fi

        echo "include_directories(${TOOLCHAIN_INCLUDE_DIR})" >> ${CMAKE_CONFIG_FILE}
        echo "set(ANDROID_TOOLCHAIN clang)" >> ${CMAKE_CONFIG_FILE}
        echo "set(ANDROID_PLATFORM android-14)" >> ${CMAKE_CONFIG_FILE}
        echo "set(ANDROID_NDK_HOME ${ANDROID_NDK_HOME})" >> ${CMAKE_CONFIG_FILE}
        ;;
    Windows)
        ;;
    Darwin)
        QT_BUILD_KIT=clang_64
        ;;
    *)
        echo "Unsupported target OS ${TARGET_OS}!"
        die
esac

if [ "${ECFLAGS}" ]; then
    echo "set(CMAKE_C_FLAGS \"\${CMAKE_C_FLAGS} ${ECFLAGS}\")" >> ${CMAKE_CONFIG_FILE}
fi

if [ "${ECXXFLAGS}" ]; then
    echo "set(CMAKE_CXX_FLAGS \"\${CMAKE_CXX_FLAGS} ${ECXXFLAGS}\")" >> ${CMAKE_CONFIG_FILE}
fi

if [ "${ELDFLAGS}" ]; then
    echo "set(CMAKE_SHARED_LINKER_FLAGS \"\${CMAKE_SHARED_LINKER_FLAGS} ${ELDFLAGS}\")" >> ${CMAKE_CONFIG_FILE}
    echo "set(CMAKE_STATIC_LINKER_FLAGS \"\${CMAKE_STATIC_LINKER_FLAGS} ${ELDFLAGS}\")" >> ${CMAKE_CONFIG_FILE}
fi

if [ "${QT5_HOME}" ]; then
    echo "set(QT5_BUILD_KIT_HOME ${QT5_HOME}/${QT_BUILD_KIT})" >> ${CMAKE_CONFIG_FILE}
    echo "set(CMAKE_PREFIX_PATH ${QT5_HOME}/${QT_BUILD_KIT})" >> ${CMAKE_CONFIG_FILE}
fi

# 写入qmake配置文件
QMAKE_CONFIG_FILE=${CURRENT_PATH}/config.qmake
cat > ${QMAKE_CONFIG_FILE} <<EOF
# Automatically generated by configure - do NOT modify!
TARGET_OS = ${TARGET_OS}
ARCH = ${ARCH})
INCDIR = ${INCDIR}
LIBDIR = ${LIBDIR}
BUILD_TYPE = ${BUILD_TYPE}
BUILD_DIR = ${BUILD_DIR}
TARGET_DIR = ${LIBRARY_OUTPUT_PATH}
EOF