/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_xeditJNI = NULL;
    jmethodID director_method_ids[48];
  }
}

#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include "avpub/StatusCode.h"
#include "avpub/DateTime.h"
#include "avpub/Define.h"
#include "avpub/StringHelper.h"
#include "avpub/ECodecID.h"
#include "avpub/ECodecLevel.h"
#include "avpub/ECodecProfile.h"
#include "avpub/EMuxerType.h"
#include "avpub/EPixFormat.h"
#include "avpub/ESampleFormat.h"
#include "avpub/Rational.h"
#include "avpub/MediaInfo.h"
#include "avpub/api.h"
#include "avpub/AutoInitProxy.h"
#include "avpub/AVMath.h"
#include "avpub/avpub.h"
#include "avpub/AVMemory.h"
#include "avpub/Buffer.h"
#include "avpub/IThread.h"
#include "avpub/Thread.h"
#include "avpub/IAVGlobal.h"
#include "avpub/IPicture.h"
#include "avpub/IFrame.h"
#include "avpub/IPacket.h"
#include "avpub/IStream.h"
#include "avpub/IOStream.h"
#include "avpub/IItemStream.h"
#include "avpub/IPacketStream.h"
#include "avpub/IFrameStream.h"
#include "avpub/IPictureStream.h"
#include "avpub/IFileStream.h"
#include "avpub/Log.h"
#include "avpub/TCircleQueue.h"
#include "avpub/TDoubleBuffer.h"
#include "avpub/TDoubleQueue.h"
#include "avpub/TSmartPtr.h"
#include "avpub/PluginManager.h"


#include "GSize.h"
#include "IBuffer.h"
#include "IRenderer.h"
//#include "IDeserializable.h"
#include "IInputStream.h"
#include "IObserver.h"
#include "IObservable.h"
#include "IOutputStream.h"
//#include "ISerializable.h"
//#include "IXmlDeserializable.h"
//#include "IXmlSerializable.h"


#include <string>


#include "xutil/id.h"
#include "xutil/InputFileStream.h"
#include "xutil/OutputFileStream.h"
#include "xutil/IDictionary.h"
#include "xutil/Image.h"


#include "xengine/EncodeParam.h"
#include "xengine/GenerateSetting.h"
#include "xengine/IGenerateObserver.h"
#include "xengine/PreviewFrame.h"
#include "xengine/IPreview.h"
#include "xengine/IClip.h"
#include "xengine/IMedia.h"
#include "xengine/ITrackClipInfo.h"
#include "xengine/ITrack.h"
#include "xengine/IProject.h"
#include "xengine/IAction.h"
#include "xengine/ITimeLineObserver.h"
#include "xengine/ITimeLine.h"
#include "xengine/IXEngine.h"


typedef int64_t IDPtr;

SWIGINTERN IDPtr *new_IDPtr(){
  return new int64_t();
}
SWIGINTERN void delete_IDPtr(IDPtr *self){
  if (self) delete self;
}
SWIGINTERN void IDPtr_assign(IDPtr *self,int64_t value){
  *self = value;
}
SWIGINTERN int64_t IDPtr_value(IDPtr *self){
  return *self;
}
SWIGINTERN int64_t *IDPtr_cast(IDPtr *self){
  return self;
}
SWIGINTERN IDPtr *IDPtr_frompointer(int64_t *t){
  return (IDPtr *) t;
}
SWIGINTERN xedit::IAVClip *xedit_IAVClip_dynamic_cast(xedit::IClip *pClip){
    return dynamic_cast<xedit::IAVClip *>(pClip);
  }
SWIGINTERN xedit::IAVMedia *xedit_IAVMedia_dynamic_cast(xedit::IMedia *pMedia){
    return dynamic_cast<xedit::IAVMedia *>(pMedia);
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "com.ds.xedit.jni.h"

SwigDirector_ILogReceiver::SwigDirector_ILogReceiver(JNIEnv *jenv) : Swig::Director(jenv) {
  
}


void SwigDirector_ILogReceiver::Receive(libav::ELogLevel eLevel, char const *pStrLog) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jeLevel  ;
  jstring jpStrLog = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method libav::ILogReceiver::Receive.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jeLevel = (jint) eLevel;
    jpStrLog = 0;
    if (pStrLog) {
      jpStrLog = jenv->NewStringUTF((const char *)pStrLog);
      if (!jpStrLog) return ;
    }
    Swig::LocalRefGuard pStrLog_refguard(jenv, jpStrLog);
    jenv->CallStaticVoidMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[0], swigjobj, jeLevel, jpStrLog);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libav::ILogReceiver::Receive ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ILogReceiver::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "Receive", "(Lcom/ds/xedit/jni/ELogLevel;Ljava/lang/String;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/ds/xedit/jni/ILogReceiver");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IBuffer::SwigDirector_IBuffer(JNIEnv *jenv) : xedit::IBuffer(), Swig::Director(jenv) {
}

xedit::EBufferType SwigDirector_IBuffer::getType() const {
  xedit::EBufferType c_result = SwigValueInit< xedit::EBufferType >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IBuffer::getType.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[1], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (xedit::EBufferType)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IBuffer::getType ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IBuffer::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getType", "()Lcom/ds/xedit/jni/EBufferType;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/ds/xedit/jni/IBuffer");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IVideoBuffer::SwigDirector_IVideoBuffer(JNIEnv *jenv) : xedit::IVideoBuffer(), Swig::Director(jenv) {
}

xedit::EBufferType SwigDirector_IVideoBuffer::getType() const {
  xedit::EBufferType c_result = SwigValueInit< xedit::EBufferType >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IVideoBuffer::getType.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[2], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (xedit::EBufferType)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IVideoBuffer::getType ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

xedit::GSize SwigDirector_IVideoBuffer::getVideoRect() const {
  xedit::GSize c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  xedit::GSize *argp ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IVideoBuffer::getVideoRect.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[3], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(xedit::GSize **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type xedit::GSize");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IVideoBuffer::getVideoRect ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

libav::EPixFormat SwigDirector_IVideoBuffer::getPixelFormat() const {
  libav::EPixFormat c_result = SwigValueInit< libav::EPixFormat >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IVideoBuffer::getPixelFormat.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[4], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (libav::EPixFormat)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IVideoBuffer::getPixelFormat ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

xedit::EBufferLocation SwigDirector_IVideoBuffer::getLocation() const {
  xedit::EBufferLocation c_result = SwigValueInit< xedit::EBufferLocation >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IVideoBuffer::getLocation.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[5], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (xedit::EBufferLocation)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IVideoBuffer::getLocation ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_IVideoBuffer::getPlaneCount() const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IVideoBuffer::getPlaneCount.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[6], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IVideoBuffer::getPlaneCount ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

uint8_t *SwigDirector_IVideoBuffer::getPlanePointer(int nPlane) const {
  uint8_t *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jnPlane  ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IVideoBuffer::getPlanePointer.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnPlane = (jint) nPlane;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[7], swigjobj, jnPlane);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = *(uint8_t **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IVideoBuffer::getPlanePointer ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_IVideoBuffer::getPlaneLineSize(int nPlane) const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jnPlane  ;
  
  if (!swig_override[6]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IVideoBuffer::getPlaneLineSize.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnPlane = (jint) nPlane;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[8], swigjobj, jnPlane);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IVideoBuffer::getPlaneLineSize ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_IVideoBuffer::getSize(int nPlane) const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jnPlane  ;
  
  if (!swig_override[7]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IVideoBuffer::getSize.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnPlane = (jint) nPlane;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[9], swigjobj, jnPlane);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IVideoBuffer::getSize ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IVideoBuffer::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getType", "()Lcom/ds/xedit/jni/EBufferType;", NULL 
    },
    {
      "getVideoRect", "()Lcom/ds/xedit/jni/GSize;", NULL 
    },
    {
      "getPixelFormat", "()Lcom/ds/xedit/jni/EPixFormat;", NULL 
    },
    {
      "getLocation", "()Lcom/ds/xedit/jni/EBufferLocation;", NULL 
    },
    {
      "getPlaneCount", "()I", NULL 
    },
    {
      "getPlanePointer", "(I)Lcom/ds/xedit/jni/SWIGTYPE_p_unsigned_char;", NULL 
    },
    {
      "getPlaneLineSize", "(I)I", NULL 
    },
    {
      "getSize", "(I)I", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/ds/xedit/jni/IVideoBuffer");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IRenderer::SwigDirector_IRenderer(JNIEnv *jenv) : xedit::IRenderer(), Swig::Director(jenv) {
}

StatusCode SwigDirector_IRenderer::render(xedit::IBuffer *pBuffer) {
  StatusCode c_result = SwigValueInit< StatusCode >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpBuffer = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IRenderer::render.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((xedit::IBuffer **)&jpBuffer) = (xedit::IBuffer *) pBuffer; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[10], swigjobj, jpBuffer);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (StatusCode)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IRenderer::render ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IRenderer::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "render", "(Lcom/ds/xedit/jni/IBuffer;)I", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/ds/xedit/jni/IRenderer");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IVideoRenderer::SwigDirector_IVideoRenderer(JNIEnv *jenv) : xedit::IVideoRenderer(), Swig::Director(jenv) {
}

StatusCode SwigDirector_IVideoRenderer::render(xedit::IBuffer *pBuffer) {
  StatusCode c_result = SwigValueInit< StatusCode >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpBuffer = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IVideoRenderer::render.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((xedit::IBuffer **)&jpBuffer) = (xedit::IBuffer *) pBuffer; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[11], swigjobj, jpBuffer);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (StatusCode)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IVideoRenderer::render ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

StatusCode SwigDirector_IVideoRenderer::init(int nWidth, int nHeight, libav::EPixFormat ePixFormat) {
  StatusCode c_result = SwigValueInit< StatusCode >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jnWidth  ;
  jint jnHeight  ;
  jint jePixFormat  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IVideoRenderer::init.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnWidth = (jint) nWidth;
    jnHeight = (jint) nHeight;
    jePixFormat = (jint) ePixFormat;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[12], swigjobj, jnWidth, jnHeight, jePixFormat);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (StatusCode)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IVideoRenderer::init ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IVideoRenderer::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "render", "(Lcom/ds/xedit/jni/IBuffer;)I", NULL 
    },
    {
      "init", "(IILcom/ds/xedit/jni/EPixFormat;)I", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/ds/xedit/jni/IVideoRenderer");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IAudioRenderer::SwigDirector_IAudioRenderer(JNIEnv *jenv) : xedit::IAudioRenderer(), Swig::Director(jenv) {
}

StatusCode SwigDirector_IAudioRenderer::render(xedit::IBuffer *pBuffer) {
  StatusCode c_result = SwigValueInit< StatusCode >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpBuffer = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IAudioRenderer::render.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((xedit::IBuffer **)&jpBuffer) = (xedit::IBuffer *) pBuffer; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[13], swigjobj, jpBuffer);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (StatusCode)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IAudioRenderer::render ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

StatusCode SwigDirector_IAudioRenderer::init(int nChannel, int nSampleRate, int nBitsPerSample, libav::ESampleFormat eSampleFormat) {
  StatusCode c_result = SwigValueInit< StatusCode >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jnChannel  ;
  jint jnSampleRate  ;
  jint jnBitsPerSample  ;
  jint jeSampleFormat  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IAudioRenderer::init.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnChannel = (jint) nChannel;
    jnSampleRate = (jint) nSampleRate;
    jnBitsPerSample = (jint) nBitsPerSample;
    jeSampleFormat = (jint) eSampleFormat;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[14], swigjobj, jnChannel, jnSampleRate, jnBitsPerSample, jeSampleFormat);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (StatusCode)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IAudioRenderer::init ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IAudioRenderer::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "render", "(Lcom/ds/xedit/jni/IBuffer;)I", NULL 
    },
    {
      "init", "(IIILcom/ds/xedit/jni/ESampleFormat;)I", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/ds/xedit/jni/IAudioRenderer");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IInputStream::SwigDirector_IInputStream(JNIEnv *jenv) : xedit::IInputStream(), Swig::Director(jenv) {
}

int SwigDirector_IInputStream::read(uint8_t *buffer, int count) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jbuffer = 0 ;
  jint jcount  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IInputStream::read.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((uint8_t **)&jbuffer) = (uint8_t *) buffer; 
    jcount = (jint) count;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[15], swigjobj, jbuffer, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IInputStream::read ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int64_t SwigDirector_IInputStream::seek(int64_t pos) {
  int64_t c_result = SwigValueInit< int64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpos  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IInputStream::seek.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jpos = (jlong) pos;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[16], swigjobj, jpos);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int64_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IInputStream::seek ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int64_t SwigDirector_IInputStream::available() {
  int64_t c_result = SwigValueInit< int64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IInputStream::available.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[17], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int64_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IInputStream::available ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int64_t SwigDirector_IInputStream::skip(int64_t n) {
  int64_t c_result = SwigValueInit< int64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jn  ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IInputStream::skip.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jn = (jlong) n;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[18], swigjobj, jn);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int64_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IInputStream::skip ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

StatusCode SwigDirector_IInputStream::close() {
  StatusCode c_result = SwigValueInit< StatusCode >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IInputStream::close.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[19], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (StatusCode)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IInputStream::close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IInputStream::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "read", "(Lcom/ds/xedit/jni/SWIGTYPE_p_unsigned_char;I)I", NULL 
    },
    {
      "seek", "(J)J", NULL 
    },
    {
      "available", "()J", NULL 
    },
    {
      "skip", "(J)J", NULL 
    },
    {
      "close", "()I", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/ds/xedit/jni/IInputStream");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IObserver::SwigDirector_IObserver(JNIEnv *jenv) : xedit::IObserver(), Swig::Director(jenv) {
}

void SwigDirector_IObserver::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/ds/xedit/jni/IObserver");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
  }
}


SwigDirector_IObservable::SwigDirector_IObservable(JNIEnv *jenv) : xedit::IObservable(), Swig::Director(jenv) {
}

void SwigDirector_IObservable::addObserver(xedit::IObserver *pObserver) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpObserver = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IObservable::addObserver.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((xedit::IObserver **)&jpObserver) = (xedit::IObserver *) pObserver; 
    jenv->CallStaticVoidMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[20], swigjobj, jpObserver);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IObservable::addObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IObservable::deleteObserver(xedit::IObserver *pObserver) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpObserver = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IObservable::deleteObserver.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((xedit::IObserver **)&jpObserver) = (xedit::IObserver *) pObserver; 
    jenv->CallStaticVoidMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[21], swigjobj, jpObserver);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IObservable::deleteObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IObservable::deleteAllObservers() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IObservable::deleteAllObservers.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[22], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IObservable::deleteAllObservers ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

int SwigDirector_IObservable::getObserverCount() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IObservable::getObserverCount.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[23], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IObservable::getObserverCount ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

xedit::IObserver *SwigDirector_IObservable::getObserver(int index) {
  xedit::IObserver *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jindex  ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IObservable::getObserver.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindex = (jint) index;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[24], swigjobj, jindex);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = *(xedit::IObserver **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IObservable::getObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IObservable::notifyAllObservers() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IObservable::notifyAllObservers.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[25], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IObservable::notifyAllObservers ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IObservable::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "addObserver", "(Lcom/ds/xedit/jni/IObserver;)V", NULL 
    },
    {
      "deleteObserver", "(Lcom/ds/xedit/jni/IObserver;)V", NULL 
    },
    {
      "deleteAllObservers", "()V", NULL 
    },
    {
      "getObserverCount", "()I", NULL 
    },
    {
      "getObserver", "(I)Lcom/ds/xedit/jni/IObserver;", NULL 
    },
    {
      "notifyAllObservers", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/ds/xedit/jni/IObservable");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IOutputStream::SwigDirector_IOutputStream(JNIEnv *jenv) : xedit::IOutputStream(), Swig::Director(jenv) {
}

int SwigDirector_IOutputStream::write(uint8_t const *buffer, int count) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jbuffer = 0 ;
  jint jcount  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IOutputStream::write.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((uint8_t **)&jbuffer) = (uint8_t *) buffer; 
    jcount = (jint) count;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[26], swigjobj, jbuffer, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IOutputStream::write ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

StatusCode SwigDirector_IOutputStream::flush() {
  StatusCode c_result = SwigValueInit< StatusCode >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IOutputStream::flush.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[27], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (StatusCode)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IOutputStream::flush ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

StatusCode SwigDirector_IOutputStream::close() {
  StatusCode c_result = SwigValueInit< StatusCode >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IOutputStream::close.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[28], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (StatusCode)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IOutputStream::close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int64_t SwigDirector_IOutputStream::seek(int64_t pos) {
  int64_t c_result = SwigValueInit< int64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpos  ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IOutputStream::seek.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jpos = (jlong) pos;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[29], swigjobj, jpos);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int64_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IOutputStream::seek ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IOutputStream::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "write", "(Lcom/ds/xedit/jni/SWIGTYPE_p_unsigned_char;I)I", NULL 
    },
    {
      "flush", "()I", NULL 
    },
    {
      "close", "()I", NULL 
    },
    {
      "seek", "(J)J", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/ds/xedit/jni/IOutputStream");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IGenerateObserver::SwigDirector_IGenerateObserver(JNIEnv *jenv) : xedit::IGenerateObserver(), Swig::Director(jenv) {
}

void SwigDirector_IGenerateObserver::onFinish(xedit::GenerateSetting const &param, StatusCode code) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jparam = 0 ;
  jint jcode  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IGenerateObserver::onFinish.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(xedit::GenerateSetting **)&jparam = (xedit::GenerateSetting *) &param; 
    jcode = (jint) code;
    jenv->CallStaticVoidMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[30], swigjobj, jparam, jcode);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IGenerateObserver::onFinish ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IGenerateObserver::onUpdateProcess(xedit::GenerateSetting const &param, libav::Rational rDuration) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jparam = 0 ;
  jlong jrDuration  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IGenerateObserver::onUpdateProcess.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(xedit::GenerateSetting **)&jparam = (xedit::GenerateSetting *) &param; 
    jrDuration = 0;
    *((libav::Rational **)&jrDuration) = new libav::Rational((const libav::Rational &)rDuration); 
    jenv->CallStaticVoidMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[31], swigjobj, jparam, jrDuration);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IGenerateObserver::onUpdateProcess ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IGenerateObserver::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onFinish", "(Lcom/ds/xedit/jni/GenerateSetting;I)V", NULL 
    },
    {
      "onUpdateProcess", "(Lcom/ds/xedit/jni/GenerateSetting;Lcom/ds/xedit/jni/Rational;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/ds/xedit/jni/IGenerateObserver");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IClip::SwigDirector_IClip(JNIEnv *jenv) : Swig::Director(jenv) {
  
}


int64_t SwigDirector_IClip::getId() const {
  int64_t c_result = SwigValueInit< int64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IClip::getId.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[32], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int64_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IClip::getId ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

xedit::EClipType SwigDirector_IClip::getType() const {
  xedit::EClipType c_result = SwigValueInit< xedit::EClipType >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IClip::getType.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[33], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (xedit::EClipType)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IClip::getType ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int64_t SwigDirector_IClip::getRefMediaId() const {
  int64_t c_result = SwigValueInit< int64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IClip::getRefMediaId.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[34], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int64_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IClip::getRefMediaId ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

libav::Rational SwigDirector_IClip::getOffsetOnTrack() const {
  libav::Rational c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  libav::Rational *argp ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IClip::getOffsetOnTrack.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[35], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(libav::Rational **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type libav::Rational");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IClip::getOffsetOnTrack ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

libav::Rational SwigDirector_IClip::getDuration() const {
  libav::Rational c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  libav::Rational *argp ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IClip::getDuration.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[36], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(libav::Rational **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type libav::Rational");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IClip::getDuration ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

libav::Rational SwigDirector_IClip::getOffsetInMedia() const {
  libav::Rational c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  libav::Rational *argp ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IClip::getOffsetInMedia.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[37], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(libav::Rational **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type libav::Rational");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IClip::getOffsetInMedia ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IClip::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getId", "()J", NULL 
    },
    {
      "getType", "()Lcom/ds/xedit/jni/EClipType;", NULL 
    },
    {
      "getRefMediaId", "()J", NULL 
    },
    {
      "getOffsetOnTrack", "()Lcom/ds/xedit/jni/Rational;", NULL 
    },
    {
      "getDuration", "()Lcom/ds/xedit/jni/Rational;", NULL 
    },
    {
      "getOffsetInMedia", "()Lcom/ds/xedit/jni/Rational;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/ds/xedit/jni/IClip");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IMedia::SwigDirector_IMedia(JNIEnv *jenv) : xedit::IMedia(), Swig::Director(jenv) {
}

int64_t SwigDirector_IMedia::getId() const {
  int64_t c_result = SwigValueInit< int64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IMedia::getId.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[38], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int64_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IMedia::getId ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

char const *SwigDirector_IMedia::getPath() const {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IMedia::getPath.");
    return (char const *)c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[39], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IMedia::getPath ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

xedit::EMediaType SwigDirector_IMedia::getMediaType() const {
  xedit::EMediaType c_result = SwigValueInit< xedit::EMediaType >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IMedia::getMediaType.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[40], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (xedit::EMediaType)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IMedia::getMediaType ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

xedit::IClip *SwigDirector_IMedia::newClip() const {
  xedit::IClip *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IMedia::newClip.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[41], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = *(xedit::IClip **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IMedia::newClip ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

xedit::IClip *SwigDirector_IMedia::newClip(libav::Rational rDuration) const {
  xedit::IClip *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrDuration  ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IMedia::newClip.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jrDuration = 0;
    *((libav::Rational **)&jrDuration) = new libav::Rational((const libav::Rational &)rDuration); 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[42], swigjobj, jrDuration);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = *(xedit::IClip **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IMedia::newClip ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

xedit::IPreview *SwigDirector_IMedia::getPreview() const {
  xedit::IPreview *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::IMedia::getPreview.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[43], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = *(xedit::IPreview **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::IMedia::getPreview ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IMedia::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getId", "()J", NULL 
    },
    {
      "getPath", "()Ljava/lang/String;", NULL 
    },
    {
      "getMediaType", "()Lcom/ds/xedit/jni/EMediaType;", NULL 
    },
    {
      "newClip", "()Lcom/ds/xedit/jni/IClip;", NULL 
    },
    {
      "newClip", "(Lcom/ds/xedit/jni/Rational;)Lcom/ds/xedit/jni/IClip;", NULL 
    },
    {
      "getPreview", "()Lcom/ds/xedit/jni/IPreview;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/ds/xedit/jni/IMedia");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ITimeLineObserver::SwigDirector_ITimeLineObserver(JNIEnv *jenv) : xedit::ITimeLineObserver(), Swig::Director(jenv) {
}

void SwigDirector_ITimeLineObserver::onPosDidChanged(libav::Rational rNewPos) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrNewPos  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::ITimeLineObserver::onPosDidChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jrNewPos = 0;
    *((libav::Rational **)&jrNewPos) = new libav::Rational((const libav::Rational &)rNewPos); 
    jenv->CallStaticVoidMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[44], swigjobj, jrNewPos);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::ITimeLineObserver::onPosDidChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ITimeLineObserver::onTrackCreated(xedit::ITrack *pTrack) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpTrack = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::ITimeLineObserver::onTrackCreated.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((xedit::ITrack **)&jpTrack) = (xedit::ITrack *) pTrack; 
    jenv->CallStaticVoidMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[45], swigjobj, jpTrack);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::ITimeLineObserver::onTrackCreated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ITimeLineObserver::onTrackRemoved(int64_t trackId) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jtrackId  ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::ITimeLineObserver::onTrackRemoved.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtrackId = (jlong) trackId;
    jenv->CallStaticVoidMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[46], swigjobj, jtrackId);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::ITimeLineObserver::onTrackRemoved ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ITimeLineObserver::onTimeLineStatusChanged(xedit::ETimeLineStatus newStatus) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jnewStatus  ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method xedit::ITimeLineObserver::onTimeLineStatusChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnewStatus = (jint) newStatus;
    jenv->CallStaticVoidMethod(Swig::jclass_xeditJNI, Swig::director_method_ids[47], swigjobj, jnewStatus);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in xedit::ITimeLineObserver::onTimeLineStatusChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ITimeLineObserver::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onPosDidChanged", "(Lcom/ds/xedit/jni/Rational;)V", NULL 
    },
    {
      "onTrackCreated", "(Lcom/ds/xedit/jni/ITrack;)V", NULL 
    },
    {
      "onTrackRemoved", "(J)V", NULL 
    },
    {
      "onTimeLineStatusChanged", "(Lcom/ds/xedit/jni/ETimeLineStatus;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/ds/xedit/jni/ITimeLineObserver");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI__1_1ANDROID_1_1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_DateTime_1nYear_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::DateTime *arg1 = (libav::DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nYear = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_DateTime_1nYear_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::DateTime *arg1 = (libav::DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::DateTime **)&jarg1; 
  result = (int) ((arg1)->nYear);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_DateTime_1nMonth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::DateTime *arg1 = (libav::DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nMonth = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_DateTime_1nMonth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::DateTime *arg1 = (libav::DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::DateTime **)&jarg1; 
  result = (int) ((arg1)->nMonth);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_DateTime_1nDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::DateTime *arg1 = (libav::DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nDay = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_DateTime_1nDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::DateTime *arg1 = (libav::DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::DateTime **)&jarg1; 
  result = (int) ((arg1)->nDay);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_DateTime_1nHour_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::DateTime *arg1 = (libav::DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nHour = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_DateTime_1nHour_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::DateTime *arg1 = (libav::DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::DateTime **)&jarg1; 
  result = (int) ((arg1)->nHour);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_DateTime_1nMinute_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::DateTime *arg1 = (libav::DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nMinute = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_DateTime_1nMinute_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::DateTime *arg1 = (libav::DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::DateTime **)&jarg1; 
  result = (int) ((arg1)->nMinute);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_DateTime_1nSecond_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::DateTime *arg1 = (libav::DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nSecond = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_DateTime_1nSecond_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::DateTime *arg1 = (libav::DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::DateTime **)&jarg1; 
  result = (int) ((arg1)->nSecond);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_DateTime_1nMilsecond_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::DateTime *arg1 = (libav::DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nMilsecond = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_DateTime_1nMilsecond_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::DateTime *arg1 = (libav::DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::DateTime **)&jarg1; 
  result = (int) ((arg1)->nMilsecond);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1DateTime(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libav::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libav::DateTime *)new libav::DateTime();
  *(libav::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1DateTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::DateTime *arg1 = (libav::DateTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::DateTime **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1CStringHelper(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libav::CStringHelper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libav::CStringHelper *)new libav::CStringHelper();
  *(libav::CStringHelper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1CStringHelper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::CStringHelper *arg1 = (libav::CStringHelper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::CStringHelper **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_CStringHelper_1W2C(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  libav::CStringHelper *arg1 = (libav::CStringHelper *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::CStringHelper **)&jarg1; 
  arg2 = *(wchar_t **)&jarg2; 
  result = (char *)(arg1)->W2C((wchar_t const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_CStringHelper_1C2W(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libav::CStringHelper *arg1 = (libav::CStringHelper *) 0 ;
  char *arg2 = (char *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::CStringHelper **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (wchar_t *)(arg1)->C2W((char const *)arg2);
  *(wchar_t **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_CStringHelper_1T2C(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  libav::CStringHelper *arg1 = (libav::CStringHelper *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::CStringHelper **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->T2C((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_CStringHelper_1T2W(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libav::CStringHelper *arg1 = (libav::CStringHelper *) 0 ;
  char *arg2 = (char *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::CStringHelper **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (wchar_t *)(arg1)->T2W((char const *)arg2);
  *(wchar_t **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_CStringHelper_1C2T(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  libav::CStringHelper *arg1 = (libav::CStringHelper *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::CStringHelper **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->C2T((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_CStringHelper_1W2T(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  libav::CStringHelper *arg1 = (libav::CStringHelper *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::CStringHelper **)&jarg1; 
  arg2 = *(wchar_t **)&jarg2; 
  result = (char *)(arg1)->W2T((wchar_t const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_AVSampleFormatToString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  libav::ESampleFormat arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (libav::ESampleFormat)jarg1; 
  result = (char *)libav::AVSampleFormatToString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVSampleFormatFromString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  libav::ESampleFormat result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (libav::ESampleFormat)libav::AVSampleFormatFromString((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMakeRational(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int64_t arg2 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = libav::AVMakeRational(arg1,arg2);
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_AVRationalMultiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libav::Rational arg1 ;
  libav::Rational arg2 ;
  libav::Rational *argp1 ;
  libav::Rational *argp2 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(libav::Rational **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libav::Rational");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(libav::Rational **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libav::Rational");
    return 0;
  }
  arg2 = *argp2; 
  result = libav::AVRationalMultiply(arg1,arg2);
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_AVRationalDivision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libav::Rational arg1 ;
  libav::Rational arg2 ;
  libav::Rational *argp1 ;
  libav::Rational *argp2 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(libav::Rational **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libav::Rational");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(libav::Rational **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libav::Rational");
    return 0;
  }
  arg2 = *argp2; 
  result = libav::AVRationalDivision(arg1,arg2);
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_AVRationalScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  libav::Rational arg2 ;
  libav::Rational *argp2 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int64_t)jarg1; 
  argp2 = *(libav::Rational **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libav::Rational");
    return 0;
  }
  arg2 = *argp2; 
  result = libav::AVRationalScale(arg1,arg2);
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1zero_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libav::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libav::Rational *)&libav::Rational::zero;
  *(libav::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1nNum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->nNum = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1nNum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Rational **)&jarg1; 
  result = (int64_t) ((arg1)->nNum);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1nDen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->nDen = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1nDen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Rational **)&jarg1; 
  result = (int64_t) ((arg1)->nDen);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1Rational_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libav::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libav::Rational *)new libav::Rational();
  *(libav::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1Rational_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int64_t arg2 ;
  libav::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (libav::Rational *)new libav::Rational(arg1,arg2);
  *(libav::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1integerValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Rational **)&jarg1; 
  result = (int64_t)((libav::Rational const *)arg1)->integerValue();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1doubleValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Rational **)&jarg1; 
  result = (double)((libav::Rational const *)arg1)->doubleValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1absValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Rational **)&jarg1; 
  result = ((libav::Rational const *)arg1)->absValue();
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1reverseValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Rational **)&jarg1; 
  result = ((libav::Rational const *)arg1)->reverseValue();
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  libav::Rational *arg2 = 0 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libav::Rational const & reference is null");
    return 0;
  } 
  result = (arg1)->operator +((libav::Rational const &)*arg2);
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1subtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  libav::Rational *arg2 = 0 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libav::Rational const & reference is null");
    return 0;
  } 
  result = (arg1)->operator -((libav::Rational const &)*arg2);
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1multiply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  libav::Rational *arg2 = 0 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libav::Rational const & reference is null");
    return 0;
  } 
  result = (arg1)->operator *((libav::Rational const &)*arg2);
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1multiply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  int64_t arg2 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (arg1)->operator *(arg2);
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1divide_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  libav::Rational *arg2 = 0 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libav::Rational const & reference is null");
    return 0;
  } 
  result = (arg1)->operator /((libav::Rational const &)*arg2);
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1divide_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  int64_t arg2 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (arg1)->operator /(arg2);
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  libav::Rational *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libav::Rational const & reference is null");
    return ;
  } 
  (arg1)->operator =((libav::Rational const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1selfAdd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  libav::Rational *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libav::Rational const & reference is null");
    return ;
  } 
  (arg1)->operator +=((libav::Rational const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1selfSubtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  libav::Rational *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libav::Rational const & reference is null");
    return ;
  } 
  (arg1)->operator -=((libav::Rational const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1selfMultiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  libav::Rational *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libav::Rational const & reference is null");
    return ;
  } 
  (arg1)->operator *=((libav::Rational const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1selfDivide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  libav::Rational *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libav::Rational const & reference is null");
    return ;
  } 
  (arg1)->operator /=((libav::Rational const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1isEqualTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  libav::Rational *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libav::Rational const & reference is null");
    return 0;
  } 
  result = (bool)((libav::Rational const *)arg1)->operator ==((libav::Rational const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1isLessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  libav::Rational *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libav::Rational const & reference is null");
    return 0;
  } 
  result = (bool)((libav::Rational const *)arg1)->operator <((libav::Rational const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1isLessThanOrEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  libav::Rational *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libav::Rational const & reference is null");
    return 0;
  } 
  result = (bool)((libav::Rational const *)arg1)->operator <=((libav::Rational const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1isGreaterThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  libav::Rational *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libav::Rational const & reference is null");
    return 0;
  } 
  result = (bool)((libav::Rational const *)arg1)->operator >((libav::Rational const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_Rational_1isGreaterThanOrEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  libav::Rational *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::Rational **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libav::Rational const & reference is null");
    return 0;
  } 
  result = (bool)((libav::Rational const *)arg1)->operator >=((libav::Rational const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1Rational(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::Rational *arg1 = (libav::Rational *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::Rational **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_BaseAVStream_1nIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::BaseAVStream *arg1 = (libav::BaseAVStream *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::BaseAVStream **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_BaseAVStream_1nIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::BaseAVStream *arg1 = (libav::BaseAVStream *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::BaseAVStream **)&jarg1; 
  result = (int) ((arg1)->nIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_BaseAVStream_1nID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::BaseAVStream *arg1 = (libav::BaseAVStream *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::BaseAVStream **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_BaseAVStream_1nID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::BaseAVStream *arg1 = (libav::BaseAVStream *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::BaseAVStream **)&jarg1; 
  result = (int) ((arg1)->nID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_BaseAVStream_1nCodecTag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::BaseAVStream *arg1 = (libav::BaseAVStream *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::BaseAVStream **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->nCodecTag = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_BaseAVStream_1nCodecTag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::BaseAVStream *arg1 = (libav::BaseAVStream *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::BaseAVStream **)&jarg1; 
  result = (uint32_t) ((arg1)->nCodecTag);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_BaseAVStream_1nBitrate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libav::BaseAVStream *arg1 = (libav::BaseAVStream *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::BaseAVStream **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->nBitrate = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_BaseAVStream_1nBitrate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::BaseAVStream *arg1 = (libav::BaseAVStream *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::BaseAVStream **)&jarg1; 
  result = (int64_t) ((arg1)->nBitrate);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_BaseAVStream_1eBitrateMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::BaseAVStream *arg1 = (libav::BaseAVStream *) 0 ;
  libav::EBitrateMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::BaseAVStream **)&jarg1; 
  arg2 = (libav::EBitrateMode)jarg2; 
  if (arg1) (arg1)->eBitrateMode = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_BaseAVStream_1eBitrateMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::BaseAVStream *arg1 = (libav::BaseAVStream *) 0 ;
  libav::EBitrateMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::BaseAVStream **)&jarg1; 
  result = (libav::EBitrateMode) ((arg1)->eBitrateMode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_BaseAVStream_1eCodecID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::BaseAVStream *arg1 = (libav::BaseAVStream *) 0 ;
  libav::ECodecID arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::BaseAVStream **)&jarg1; 
  arg2 = (libav::ECodecID)jarg2; 
  if (arg1) (arg1)->eCodecID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_BaseAVStream_1eCodecID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::BaseAVStream *arg1 = (libav::BaseAVStream *) 0 ;
  libav::ECodecID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::BaseAVStream **)&jarg1; 
  result = (libav::ECodecID) ((arg1)->eCodecID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_BaseAVStream_1rDuration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libav::BaseAVStream *arg1 = (libav::BaseAVStream *) 0 ;
  libav::Rational *arg2 = (libav::Rational *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::BaseAVStream **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2; 
  if (arg1) (arg1)->rDuration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_BaseAVStream_1rDuration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::BaseAVStream *arg1 = (libav::BaseAVStream *) 0 ;
  libav::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::BaseAVStream **)&jarg1; 
  result = (libav::Rational *)& ((arg1)->rDuration);
  *(libav::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_BaseAVStream_1rTimebase_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libav::BaseAVStream *arg1 = (libav::BaseAVStream *) 0 ;
  libav::Rational *arg2 = (libav::Rational *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::BaseAVStream **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2; 
  if (arg1) (arg1)->rTimebase = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_BaseAVStream_1rTimebase_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::BaseAVStream *arg1 = (libav::BaseAVStream *) 0 ;
  libav::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::BaseAVStream **)&jarg1; 
  result = (libav::Rational *)& ((arg1)->rTimebase);
  *(libav::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1BaseAVStream(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libav::BaseAVStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libav::BaseAVStream *)new libav::BaseAVStream();
  *(libav::BaseAVStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1BaseAVStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::BaseAVStream *arg1 = (libav::BaseAVStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::BaseAVStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioStream_1eSampleFmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::AudioStream *arg1 = (libav::AudioStream *) 0 ;
  libav::ESampleFormat arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AudioStream **)&jarg1; 
  arg2 = (libav::ESampleFormat)jarg2; 
  if (arg1) (arg1)->eSampleFmt = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioStream_1eSampleFmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::AudioStream *arg1 = (libav::AudioStream *) 0 ;
  libav::ESampleFormat result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AudioStream **)&jarg1; 
  result = (libav::ESampleFormat) ((arg1)->eSampleFmt);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioStream_1nSampleRate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::AudioStream *arg1 = (libav::AudioStream *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AudioStream **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nSampleRate = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioStream_1nSampleRate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::AudioStream *arg1 = (libav::AudioStream *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AudioStream **)&jarg1; 
  result = (int) ((arg1)->nSampleRate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioStream_1nBitsPerSample_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::AudioStream *arg1 = (libav::AudioStream *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AudioStream **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nBitsPerSample = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioStream_1nBitsPerSample_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::AudioStream *arg1 = (libav::AudioStream *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AudioStream **)&jarg1; 
  result = (int) ((arg1)->nBitsPerSample);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioStream_1nChannels_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::AudioStream *arg1 = (libav::AudioStream *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AudioStream **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nChannels = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioStream_1nChannels_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::AudioStream *arg1 = (libav::AudioStream *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AudioStream **)&jarg1; 
  result = (int) ((arg1)->nChannels);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioStream_1nChannelLayout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::AudioStream *arg1 = (libav::AudioStream *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AudioStream **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nChannelLayout = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioStream_1nChannelLayout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::AudioStream *arg1 = (libav::AudioStream *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AudioStream **)&jarg1; 
  result = (int) ((arg1)->nChannelLayout);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioStream_1bLossless_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libav::AudioStream *arg1 = (libav::AudioStream *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AudioStream **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bLossless = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioStream_1bLossless_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libav::AudioStream *arg1 = (libav::AudioStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AudioStream **)&jarg1; 
  result = (bool) ((arg1)->bLossless);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioStream_1reserved_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libav::AudioStream *arg1 = (libav::AudioStream *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AudioStream **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->reserved, (const char *)arg2, 256-1);
      arg1->reserved[256-1] = 0;
    } else {
      arg1->reserved[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioStream_1reserved_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libav::AudioStream *arg1 = (libav::AudioStream *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AudioStream **)&jarg1; 
  result = (char *)(char *) ((arg1)->reserved);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1AudioStream(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libav::AudioStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libav::AudioStream *)new libav::AudioStream();
  *(libav::AudioStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1AudioStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::AudioStream *arg1 = (libav::AudioStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::AudioStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1ePixFmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  libav::EPixFormat arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  arg2 = (libav::EPixFormat)jarg2; 
  if (arg1) (arg1)->ePixFmt = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1ePixFmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  libav::EPixFormat result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  result = (libav::EPixFormat) ((arg1)->ePixFmt);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1nWidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->nWidth = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1nWidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  result = (uint32_t) ((arg1)->nWidth);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1nHeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->nHeight = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1nHeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  result = (uint32_t) ((arg1)->nHeight);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1rSAR_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  libav::Rational *arg2 = (libav::Rational *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2; 
  if (arg1) (arg1)->rSAR = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1rSAR_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  libav::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  result = (libav::Rational *)& ((arg1)->rSAR);
  *(libav::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1rDAR_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  libav::Rational *arg2 = (libav::Rational *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2; 
  if (arg1) (arg1)->rDAR = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1rDAR_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  libav::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  result = (libav::Rational *)& ((arg1)->rDAR);
  *(libav::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1eFrameRateMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  libav::EFrameRateMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  arg2 = (libav::EFrameRateMode)jarg2; 
  if (arg1) (arg1)->eFrameRateMode = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1eFrameRateMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  libav::EFrameRateMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  result = (libav::EFrameRateMode) ((arg1)->eFrameRateMode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1rFrameRate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  libav::Rational *arg2 = (libav::Rational *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2; 
  if (arg1) (arg1)->rFrameRate = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1rFrameRate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  libav::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  result = (libav::Rational *)& ((arg1)->rFrameRate);
  *(libav::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1nFrameCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->nFrameCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1nFrameCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  result = (int64_t) ((arg1)->nFrameCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1eStandard_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  libav::EStandard arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  arg2 = (libav::EStandard)jarg2; 
  if (arg1) (arg1)->eStandard = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1eStandard_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  libav::EStandard result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  result = (libav::EStandard) ((arg1)->eStandard);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1bInterlaced_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bInterlaced = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1bInterlaced_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  result = (bool) ((arg1)->bInterlaced);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1bTopFieldFirst_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bTopFieldFirst = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1bTopFieldFirst_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  result = (bool) ((arg1)->bTopFieldFirst);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1bLossless_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bLossless = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1bLossless_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  result = (bool) ((arg1)->bLossless);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1eProfile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  libav::ECodecProfile arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  arg2 = (libav::ECodecProfile)jarg2; 
  if (arg1) (arg1)->eProfile = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1eProfile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  libav::ECodecProfile result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  result = (libav::ECodecProfile) ((arg1)->eProfile);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1eLevel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  libav::ECodecLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  arg2 = (libav::ECodecLevel)jarg2; 
  if (arg1) (arg1)->eLevel = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1eLevel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  libav::ECodecLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  result = (libav::ECodecLevel) ((arg1)->eLevel);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1bHasBFrames_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bHasBFrames = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1bHasBFrames_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  result = (bool) ((arg1)->bHasBFrames);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1reserved_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->reserved, (const char *)arg2, 256-1);
      arg1->reserved[256-1] = 0;
    } else {
      arg1->reserved[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1reserved_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::VideoStream **)&jarg1; 
  result = (char *)(char *) ((arg1)->reserved);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1VideoStream(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libav::VideoStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libav::VideoStream *)new libav::VideoStream();
  *(libav::VideoStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1VideoStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::VideoStream *arg1 = (libav::VideoStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::VideoStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->path, (const char *)arg2, 1024-1);
      arg1->path[1024-1] = 0;
    } else {
      arg1->path[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  result = (char *)(char *) ((arg1)->path);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1codec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->codec, (const char *)arg2, 64-1);
      arg1->codec[64-1] = 0;
    } else {
      arg1->codec[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1codec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  result = (char *)(char *) ((arg1)->codec);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1nFileSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->nFileSize = arg2;
}


SWIGEXPORT jobject JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1nFileSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  result = (uint64_t) ((arg1)->nFileSize);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1rDuration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  libav::Rational *arg2 = (libav::Rational *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2; 
  if (arg1) (arg1)->rDuration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1rDuration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  libav::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  result = (libav::Rational *)& ((arg1)->rDuration);
  *(libav::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1eMuxerType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  libav::EMuxerType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  arg2 = (libav::EMuxerType)jarg2; 
  if (arg1) (arg1)->eMuxerType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1eMuxerType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  libav::EMuxerType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  result = (libav::EMuxerType) ((arg1)->eMuxerType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1nOverallBitrate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->nOverallBitrate = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1nOverallBitrate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  result = (uint32_t) ((arg1)->nOverallBitrate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1nVideoCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nVideoCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1nVideoCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  result = (int) ((arg1)->nVideoCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1vStreams_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  libav::VideoStream *arg2 ;
  jlong *jarr2 ;
  jsize sz2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  {
    int i;
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    sz2 = jenv->GetArrayLength(jarg2);
    if (sz2 != 8) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
      return ;
    }
    jarr2 = jenv->GetLongArrayElements(jarg2, 0);
    if (!jarr2) {
      return ;
    }
    
    arg2 = new libav::VideoStream[sz2];
    
    
    
    if (!arg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return ;
    }
    for (i=0; i<sz2; i++) {
      arg2[i] = **(libav::VideoStream **)&jarr2[i];
    }
  }
  {
    size_t ii;
    libav::VideoStream *b = (libav::VideoStream *) arg1->vStreams;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((libav::VideoStream *) arg2 + ii);
  }
  {
    int i;
    for (i=0; i<sz2; i++) {
      **(libav::VideoStream **)&jarr2[i] = arg2[i];
    }
    jenv->ReleaseLongArrayElements(jarg2, jarr2, 0);
  }
  delete [] arg2; 
}


SWIGEXPORT jlongArray JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1vStreams_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlongArray jresult = 0 ;
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  libav::VideoStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  result = (libav::VideoStream *)(libav::VideoStream *) ((arg1)->vStreams);
  {
    jlong *arr;
    int i;
    jresult = jenv->NewLongArray(8);
    if (!jresult) {
      return 0;
    }
    arr = jenv->GetLongArrayElements(jresult, 0);
    if (!arr) {
      return 0;
    }
    for (i=0; i<8; i++) {
      arr[i] = 0;
      *(libav::VideoStream **)&arr[i] = &result[i];
    }
    jenv->ReleaseLongArrayElements(jresult, arr, 0);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1nAudioCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nAudioCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1nAudioCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  result = (int) ((arg1)->nAudioCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1aStreams_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  libav::AudioStream *arg2 ;
  jlong *jarr2 ;
  jsize sz2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  {
    int i;
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    sz2 = jenv->GetArrayLength(jarg2);
    if (sz2 != 8) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
      return ;
    }
    jarr2 = jenv->GetLongArrayElements(jarg2, 0);
    if (!jarr2) {
      return ;
    }
    
    arg2 = new libav::AudioStream[sz2];
    
    
    
    if (!arg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return ;
    }
    for (i=0; i<sz2; i++) {
      arg2[i] = **(libav::AudioStream **)&jarr2[i];
    }
  }
  {
    size_t ii;
    libav::AudioStream *b = (libav::AudioStream *) arg1->aStreams;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((libav::AudioStream *) arg2 + ii);
  }
  {
    int i;
    for (i=0; i<sz2; i++) {
      **(libav::AudioStream **)&jarr2[i] = arg2[i];
    }
    jenv->ReleaseLongArrayElements(jarg2, jarr2, 0);
  }
  delete [] arg2; 
}


SWIGEXPORT jlongArray JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1aStreams_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlongArray jresult = 0 ;
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  libav::AudioStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  result = (libav::AudioStream *)(libav::AudioStream *) ((arg1)->aStreams);
  {
    jlong *arr;
    int i;
    jresult = jenv->NewLongArray(8);
    if (!jresult) {
      return 0;
    }
    arr = jenv->GetLongArrayElements(jresult, 0);
    if (!arr) {
      return 0;
    }
    for (i=0; i<8; i++) {
      arr[i] = 0;
      *(libav::AudioStream **)&arr[i] = &result[i];
    }
    jenv->ReleaseLongArrayElements(jresult, arr, 0);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1reserved_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->reserved, (const char *)arg2, 256-1);
      arg1->reserved[256-1] = 0;
    } else {
      arg1->reserved[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMediaInfo_1reserved_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  result = (char *)(char *) ((arg1)->reserved);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1AVMediaInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libav::AVMediaInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libav::AVMediaInfo *)new libav::AVMediaInfo();
  *(libav::AVMediaInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1AVMediaInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::AVMediaInfo *arg1 = (libav::AVMediaInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::AVMediaInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVCreateCondition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  ICondition **arg1 = (ICondition **) 0 ;
  char *arg2 = (char *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ICondition ***)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (StatusCode)libav::AVCreateCondition(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVCreateCondition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  ICondition **arg1 = (ICondition **) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ICondition ***)&jarg1; 
  result = (StatusCode)libav::AVCreateCondition(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVCreateMutex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  IMutex **arg1 = (IMutex **) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IMutex ***)&jarg1; 
  result = (StatusCode)libav::AVCreateMutex(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_ds_xedit_jni_xeditJNI_AVGetCurrentTime(JNIEnv *jenv, jclass jcls) {
  jobject jresult = 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint64_t)libav::AVGetCurrentTime();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_AVGetCurrentDate(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libav::DateTime result;
  
  (void)jenv;
  (void)jcls;
  result = libav::AVGetCurrentDate();
  *(libav::DateTime **)&jresult = new libav::DateTime((const libav::DateTime &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVGetCurrentClock(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AVClock result;
  
  (void)jenv;
  (void)jcls;
  result = (AVClock)libav::AVGetCurrentClock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVClocksPerSecond(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)libav::AVClocksPerSecond();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_ds_xedit_jni_xeditJNI_AVClockToTime(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jfloat jresult = 0 ;
  AVClock arg1 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (AVClock)jarg1; 
  result = (float)libav::AVClockToTime(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVTimeToClock(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jint jresult = 0 ;
  float arg1 ;
  AVClock result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (AVClock)libav::AVTimeToClock(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVSleep(JNIEnv *jenv, jclass jcls, jint jarg1) {
  uint32_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32_t)jarg1; 
  libav::AVSleep(arg1);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVSetLibDirectory(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  libav::AVSetLibDirectory((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_AVLoadDynamicLib(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (void *)libav::AVLoadDynamicLib((char const *)arg1);
  *(void **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_AVFindFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  char *arg2 = (char *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (void *)libav::AVFindFunction((void const *)arg1,(char const *)arg2);
  *(void **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_AVFreeDynamicLib(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  void *arg1 = (void *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (bool)libav::AVFreeDynamicLib((void const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVGetCurrentModulePath(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  libav::AVGetCurrentModulePath(arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_AVGetModuleHandle(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (void *)libav::AVGetModuleHandle((char const *)arg1);
  *(void **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVGetModulePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  void *arg1 = (void *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  libav::AVGetModulePath((void const *)arg1,arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMemcopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32_t arg3 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (void *)libav::AVMemcopy(arg1,(void const *)arg2,arg3);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVTrace(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  libav::AVTrace((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVGetSampleBits(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  libav::ESampleFormat arg1 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (libav::ESampleFormat)jarg1; 
  result = (uint32_t)libav::AVGetSampleBits(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVGetCurrentProcessID(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)libav::AVGetCurrentProcessID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVGetCurrentThreadID(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)libav::AVGetCurrentThreadID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_AVHasAlphaChannel(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  libav::EPixFormat arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (libav::EPixFormat)jarg1; 
  result = (bool)libav::AVHasAlphaChannel(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVGetFillColor(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  libav::EPixFormat arg1 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (libav::EPixFormat)jarg1; 
  result = (uint32_t)libav::AVGetFillColor(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVGetPlaneCount(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  libav::EPixFormat arg1 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (libav::EPixFormat)jarg1; 
  result = (uint32_t)libav::AVGetPlaneCount(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_AVFileOrDirExist(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)libav::AVFileOrDirExist((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMakeDir(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (StatusCode)libav::AVMakeDir((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_AVGetFileModifyTime(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int64_t)libav::AVGetFileModifyTime((char const *)arg1);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_AVDumpBinary(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint32_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (bool)libav::AVDumpBinary((char const *)arg1,(unsigned char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVGetCPUCoreNumber(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)libav::AVGetCPUCoreNumber();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_AVGetSystemCodeString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  int64_t arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  result = (char *)libav::AVGetSystemCodeString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1CAutoInitProxy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  ProxyFunc arg1 = (ProxyFunc) 0 ;
  ProxyFunc arg2 = (ProxyFunc) 0 ;
  CAutoInitProxy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProxyFunc *)&jarg1; 
  arg2 = *(ProxyFunc *)&jarg2; 
  result = (CAutoInitProxy *)new CAutoInitProxy(arg1,arg2);
  *(CAutoInitProxy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1CAutoInitProxy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ProxyFunc arg1 = (ProxyFunc) 0 ;
  CAutoInitProxy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProxyFunc *)&jarg1; 
  result = (CAutoInitProxy *)new CAutoInitProxy(arg1);
  *(CAutoInitProxy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1CAutoInitProxy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CAutoInitProxy *arg1 = (CAutoInitProxy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CAutoInitProxy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_GCD(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int64_t arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (int64_t)GCD(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_LCM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int64_t arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (int64_t)LCM(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_Scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (int64_t)Scale(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_AVMalloc(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32_t)jarg1; 
  result = (void *)libav::AVMalloc(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVFree(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void **arg1 = (void **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void ***)&jarg1; 
  libav::AVFree(arg1);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_Buffer_1pData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libav::Buffer *arg1 = (libav::Buffer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Buffer **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  if (arg1) (arg1)->pData = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_Buffer_1pData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::Buffer *arg1 = (libav::Buffer *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Buffer **)&jarg1; 
  result = (uint8_t *) ((arg1)->pData);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_Buffer_1ui32Size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::Buffer *arg1 = (libav::Buffer *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Buffer **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ui32Size = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_Buffer_1ui32Size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::Buffer *arg1 = (libav::Buffer *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Buffer **)&jarg1; 
  result = (uint32_t) ((arg1)->ui32Size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_Buffer_1ui32Len_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::Buffer *arg1 = (libav::Buffer *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Buffer **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ui32Len = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_Buffer_1ui32Len_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::Buffer *arg1 = (libav::Buffer *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Buffer **)&jarg1; 
  result = (uint32_t) ((arg1)->ui32Len);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1Buffer_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libav::Buffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libav::Buffer *)new libav::Buffer();
  *(libav::Buffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1Buffer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  libav::Buffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32_t)jarg1; 
  result = (libav::Buffer *)new libav::Buffer(arg1);
  *(libav::Buffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1Buffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::Buffer *arg1 = (libav::Buffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::Buffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_Buffer_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::Buffer *arg1 = (libav::Buffer *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Buffer **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->Init(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1ICondition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::ICondition *arg1 = (libav::ICondition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::ICondition **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ICondition_1Signal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::ICondition *arg1 = (libav::ICondition *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::ICondition **)&jarg1; 
  result = (StatusCode)(arg1)->Signal();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ICondition_1Wait(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::ICondition *arg1 = (libav::ICondition *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::ICondition **)&jarg1; 
  result = (StatusCode)(arg1)->Wait();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ICondition_1WaitTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libav::ICondition *arg1 = (libav::ICondition *) 0 ;
  uint32_t arg2 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::ICondition **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (StatusCode)(arg1)->WaitTimeout(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IMutex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::IMutex *arg1 = (libav::IMutex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::IMutex **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IMutex_1Lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libav::IMutex *arg1 = (libav::IMutex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IMutex **)&jarg1; 
  (arg1)->Lock();
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IMutex_1Unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libav::IMutex *arg1 = (libav::IMutex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IMutex **)&jarg1; 
  (arg1)->Unlock();
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1ISemaphore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::ISemaphore *arg1 = (libav::ISemaphore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::ISemaphore **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ISemaphore_1Increase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::ISemaphore *arg1 = (libav::ISemaphore *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::ISemaphore **)&jarg1; 
  result = (StatusCode)(arg1)->Increase();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ISemaphore_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::ISemaphore *arg1 = (libav::ISemaphore *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::ISemaphore **)&jarg1; 
  result = (uint32_t)(arg1)->GetValue();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ISemaphore_1Wait(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::ISemaphore *arg1 = (libav::ISemaphore *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::ISemaphore **)&jarg1; 
  result = (StatusCode)(arg1)->Wait();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ISemaphore_1WaitTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libav::ISemaphore *arg1 = (libav::ISemaphore *) 0 ;
  uint32_t arg2 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::ISemaphore **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (StatusCode)(arg1)->WaitTimeout(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IThread(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::IThread *arg1 = (libav::IThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::IThread **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IThread_1TStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IThread *arg1 = (libav::IThread *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IThread **)&jarg1; 
  result = (StatusCode)(arg1)->TStart();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IThread_1TStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IThread *arg1 = (libav::IThread *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IThread **)&jarg1; 
  result = (StatusCode)(arg1)->TStop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IThread_1TSuspend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IThread *arg1 = (libav::IThread *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IThread **)&jarg1; 
  result = (StatusCode)(arg1)->TSuspend();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IThread_1TResume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IThread *arg1 = (libav::IThread *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IThread **)&jarg1; 
  result = (StatusCode)(arg1)->TResume();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IThread_1GetThreadStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IThread *arg1 = (libav::IThread *) 0 ;
  libav::EThreadStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IThread **)&jarg1; 
  result = (libav::EThreadStatus)((libav::IThread const *)arg1)->GetThreadStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1CThread(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::CThread *arg1 = (libav::CThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::CThread **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_CThread_1TStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::CThread *arg1 = (libav::CThread *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::CThread **)&jarg1; 
  result = (StatusCode)(arg1)->TStart();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_CThread_1TStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::CThread *arg1 = (libav::CThread *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::CThread **)&jarg1; 
  result = (StatusCode)(arg1)->TStop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_CThread_1TSuspend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::CThread *arg1 = (libav::CThread *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::CThread **)&jarg1; 
  result = (StatusCode)(arg1)->TSuspend();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_CThread_1TResume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::CThread *arg1 = (libav::CThread *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::CThread **)&jarg1; 
  result = (StatusCode)(arg1)->TResume();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_CThread_1GetThreadStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::CThread *arg1 = (libav::CThread *) 0 ;
  libav::EThreadStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::CThread **)&jarg1; 
  result = (libav::EThreadStatus)((libav::CThread const *)arg1)->GetThreadStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_Description_1shortDesc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libav::Description *arg1 = (libav::Description *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Description **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->shortDesc, (const char *)arg2, 32-1);
      arg1->shortDesc[32-1] = 0;
    } else {
      arg1->shortDesc[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_Description_1shortDesc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libav::Description *arg1 = (libav::Description *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Description **)&jarg1; 
  result = (char *)(char *) ((arg1)->shortDesc);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_Description_1longDesc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libav::Description *arg1 = (libav::Description *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Description **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->longDesc, (const char *)arg2, 256-1);
      arg1->longDesc[256-1] = 0;
    } else {
      arg1->longDesc[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_Description_1longDesc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libav::Description *arg1 = (libav::Description *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::Description **)&jarg1; 
  result = (char *)(char *) ((arg1)->longDesc);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1Description(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libav::Description *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libav::Description *)new libav::Description();
  *(libav::Description **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1Description(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::Description *arg1 = (libav::Description *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::Description **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IAVGlobal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVSetLanguage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  libav::ELanguage arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  arg2 = (libav::ELanguage)jarg2; 
  (arg1)->AVSetLanguage(arg2);
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVCodecGetCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  result = (uint32_t)((libav::IAVGlobal const *)arg1)->AVCodecGetCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVCodecEnumerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  libav::ECodecID *arg2 = (libav::ECodecID *) 0 ;
  uint32_t arg3 ;
  uint32_t *arg4 = (uint32_t *) 0 ;
  jint *jarr2 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(uint32_t **)&jarg4; 
  result = (StatusCode)((libav::IAVGlobal const *)arg1)->AVCodecEnumerate(arg2,arg3,arg4);
  jresult = (jint)result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVCodecGetDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  libav::ECodecID arg2 ;
  libav::Description *arg3 = (libav::Description *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  arg2 = (libav::ECodecID)jarg2; 
  arg3 = *(libav::Description **)&jarg3; 
  result = (StatusCode)((libav::IAVGlobal const *)arg1)->AVCodecGetDescription(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVMuxerGetCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  result = (uint32_t)((libav::IAVGlobal const *)arg1)->AVMuxerGetCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVMuxerEnumerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  libav::EMuxerType *arg2 = (libav::EMuxerType *) 0 ;
  uint32_t arg3 ;
  uint32_t *arg4 = (uint32_t *) 0 ;
  jint *jarr2 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(uint32_t **)&jarg4; 
  result = (StatusCode)((libav::IAVGlobal const *)arg1)->AVMuxerEnumerate(arg2,arg3,arg4);
  jresult = (jint)result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVMuxerGetDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  libav::EMuxerType arg2 ;
  libav::Description *arg3 = (libav::Description *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  arg2 = (libav::EMuxerType)jarg2; 
  arg3 = *(libav::Description **)&jarg3; 
  result = (StatusCode)((libav::IAVGlobal const *)arg1)->AVMuxerGetDescription(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVPixelFormatGetCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  result = (uint32_t)((libav::IAVGlobal const *)arg1)->AVPixelFormatGetCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVPixelFormatEnumerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  libav::EPixFormat *arg2 = (libav::EPixFormat *) 0 ;
  uint32_t arg3 ;
  uint32_t *arg4 = (uint32_t *) 0 ;
  jint *jarr2 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(uint32_t **)&jarg4; 
  result = (StatusCode)((libav::IAVGlobal const *)arg1)->AVPixelFormatEnumerate(arg2,arg3,arg4);
  jresult = (jint)result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVPixelFormatGetDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  libav::EPixFormat arg2 ;
  libav::Description *arg3 = (libav::Description *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  arg2 = (libav::EPixFormat)jarg2; 
  arg3 = *(libav::Description **)&jarg3; 
  result = (StatusCode)((libav::IAVGlobal const *)arg1)->AVPixelFormatGetDescription(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVBitrateModeGetCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  result = (uint32_t)((libav::IAVGlobal const *)arg1)->AVBitrateModeGetCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVBitrateModeEnumerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  libav::EBitrateMode *arg2 = (libav::EBitrateMode *) 0 ;
  uint32_t arg3 ;
  uint32_t *arg4 = (uint32_t *) 0 ;
  jint *jarr2 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(uint32_t **)&jarg4; 
  result = (StatusCode)((libav::IAVGlobal const *)arg1)->AVBitrateModeEnumerate(arg2,arg3,arg4);
  jresult = (jint)result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVBitrateModeGetDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  libav::EBitrateMode arg2 ;
  libav::Description *arg3 = (libav::Description *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  arg2 = (libav::EBitrateMode)jarg2; 
  arg3 = *(libav::Description **)&jarg3; 
  result = (StatusCode)((libav::IAVGlobal const *)arg1)->AVBitrateModeGetDescription(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVStandardGetCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  result = (uint32_t)((libav::IAVGlobal const *)arg1)->AVStandardGetCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVStandardEnumerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  libav::EStandard *arg2 = (libav::EStandard *) 0 ;
  uint32_t arg3 ;
  uint32_t *arg4 = (uint32_t *) 0 ;
  jint *jarr2 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(uint32_t **)&jarg4; 
  result = (StatusCode)((libav::IAVGlobal const *)arg1)->AVStandardEnumerate(arg2,arg3,arg4);
  jresult = (jint)result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVStandardGetDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  libav::EStandard arg2 ;
  libav::Description *arg3 = (libav::Description *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  arg2 = (libav::EStandard)jarg2; 
  arg3 = *(libav::Description **)&jarg3; 
  result = (StatusCode)((libav::IAVGlobal const *)arg1)->AVStandardGetDescription(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVSampleFormatGetCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  result = (uint32_t)((libav::IAVGlobal const *)arg1)->AVSampleFormatGetCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVSampleFormatEnumerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  libav::ESampleFormat *arg2 = (libav::ESampleFormat *) 0 ;
  uint32_t arg3 ;
  uint32_t *arg4 = (uint32_t *) 0 ;
  jint *jarr2 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(uint32_t **)&jarg4; 
  result = (StatusCode)((libav::IAVGlobal const *)arg1)->AVSampleFormatEnumerate(arg2,arg3,arg4);
  jresult = (jint)result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVGlobal_1AVSampleFormatGetDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  libav::IAVGlobal *arg1 = (libav::IAVGlobal *) 0 ;
  libav::ESampleFormat arg2 ;
  libav::Description *arg3 = (libav::Description *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libav::IAVGlobal **)&jarg1; 
  arg2 = (libav::ESampleFormat)jarg2; 
  arg3 = *(libav::Description **)&jarg3; 
  result = (StatusCode)((libav::IAVGlobal const *)arg1)->AVSampleFormatGetDescription(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_AVGetGlobal(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libav::IAVGlobal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libav::IAVGlobal *)libav::AVGetGlobal();
  *(libav::IAVGlobal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IPicture(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::IPicture *arg1 = (libav::IPicture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::IPicture **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IPicture_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jlongArray jarg5) {
  jint jresult = 0 ;
  libav::IPicture *arg1 = (libav::IPicture *) 0 ;
  libav::EPixFormat arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  int32_t *arg5 ;
  jlong *jarr5 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPicture **)&jarg1; 
  arg2 = (libav::EPixFormat)jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInUint(jenv, &jarr5, (unsigned int **)&arg5, jarg5)) return 0; 
  result = (StatusCode)(arg1)->Init(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  SWIG_JavaArrayArgoutUint(jenv, jarr5, (unsigned int *)arg5, jarg5); 
  delete [] arg5; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IPicture_1GetPixelFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IPicture *arg1 = (libav::IPicture *) 0 ;
  libav::EPixFormat result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPicture **)&jarg1; 
  result = (libav::EPixFormat)((libav::IPicture const *)arg1)->GetPixelFormat();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IPicture_1GetPixelWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IPicture *arg1 = (libav::IPicture *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPicture **)&jarg1; 
  result = (uint32_t)((libav::IPicture const *)arg1)->GetPixelWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IPicture_1GetPixelHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IPicture *arg1 = (libav::IPicture *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPicture **)&jarg1; 
  result = (uint32_t)((libav::IPicture const *)arg1)->GetPixelHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IPicture_1GetPlaneData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libav::IPicture *arg1 = (libav::IPicture *) 0 ;
  uint32_t arg2 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPicture **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (uint8_t *)((libav::IPicture const *)arg1)->GetPlaneData(arg2);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IPicture_1GetPlanePitch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libav::IPicture *arg1 = (libav::IPicture *) 0 ;
  uint32_t arg2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPicture **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (int32_t)((libav::IPicture const *)arg1)->GetPlanePitch(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IPicture_1CopyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  libav::IPicture *arg1 = (libav::IPicture *) 0 ;
  libav::IPicture *arg2 = (libav::IPicture *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::IPicture **)&jarg1; 
  arg2 = *(libav::IPicture **)&jarg2; 
  result = (StatusCode)(arg1)->CopyFrom((libav::IPicture const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVCreatePicture(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jint jresult = 0 ;
  libav::IPicture **arg1 = (libav::IPicture **) 0 ;
  libav::IPicture *ppObject1 = 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = &ppObject1;
  
  result = (StatusCode)libav::AVCreatePicture(arg1);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = jenv->FindClass("com/ds/libav/jni/IPicture");
    jfieldID fid = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(libav::IPicture **)&cPtr = *arg1;
    jenv->SetLongField(jarg1, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::IFrame *arg1 = (libav::IFrame *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::IFrame **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IFrame_1GetFrameType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IFrame *arg1 = (libav::IFrame *) 0 ;
  libav::EFrameType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IFrame **)&jarg1; 
  result = (libav::EFrameType)((libav::IFrame const *)arg1)->GetFrameType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IFrame_1GetFramePts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::IFrame *arg1 = (libav::IFrame *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IFrame **)&jarg1; 
  result = (int64_t)((libav::IFrame const *)arg1)->GetFramePts();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IFrame_1CopyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  libav::IFrame *arg1 = (libav::IFrame *) 0 ;
  libav::IFrame *arg2 = (libav::IFrame *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::IFrame **)&jarg1; 
  arg2 = *(libav::IFrame **)&jarg2; 
  result = (StatusCode)(arg1)->CopyFrom((libav::IFrame const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IFrame_1SetPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libav::IFrame *arg1 = (libav::IFrame *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IFrame **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  (arg1)->SetPts(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IVFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::IVFrame *arg1 = (libav::IVFrame *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::IVFrame **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_IVFrame_1Interlaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libav::IVFrame *arg1 = (libav::IVFrame *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IVFrame **)&jarg1; 
  result = (bool)((libav::IVFrame const *)arg1)->Interlaced();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_IVFrame_1TopFieldFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libav::IVFrame *arg1 = (libav::IVFrame *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IVFrame **)&jarg1; 
  result = (bool)((libav::IVFrame const *)arg1)->TopFieldFirst();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IVFrame_1GetPictureType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IVFrame *arg1 = (libav::IVFrame *) 0 ;
  libav::EPictureType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IVFrame **)&jarg1; 
  result = (libav::EPictureType)((libav::IVFrame const *)arg1)->GetPictureType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_IVFrame_1Telecined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libav::IVFrame *arg1 = (libav::IVFrame *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IVFrame **)&jarg1; 
  result = (bool)((libav::IVFrame const *)arg1)->Telecined();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IVFrame_1SetInterlaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libav::IVFrame *arg1 = (libav::IVFrame *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IVFrame **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetInterlaced(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IVFrame_1SetTopFieldFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libav::IVFrame *arg1 = (libav::IVFrame *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IVFrame **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTopFieldFirst(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IVFrame_1SetPictureType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::IVFrame *arg1 = (libav::IVFrame *) 0 ;
  libav::EPictureType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IVFrame **)&jarg1; 
  arg2 = (libav::EPictureType)jarg2; 
  (arg1)->SetPictureType(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IVFrame_1SetTelecined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libav::IVFrame *arg1 = (libav::IVFrame *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IVFrame **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTelecined(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IAFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::IAFrame *arg1 = (libav::IAFrame *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::IAFrame **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAFrame_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jint jresult = 0 ;
  libav::IAFrame *arg1 = (libav::IAFrame *) 0 ;
  libav::ESampleFormat arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  uint32_t arg6 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAFrame **)&jarg1; 
  arg2 = (libav::ESampleFormat)jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = (uint32_t)jarg6; 
  result = (StatusCode)(arg1)->Init(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAFrame_1GetSampleFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IAFrame *arg1 = (libav::IAFrame *) 0 ;
  libav::ESampleFormat result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAFrame **)&jarg1; 
  result = (libav::ESampleFormat)((libav::IAFrame const *)arg1)->GetSampleFormat();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAFrame_1GetSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IAFrame *arg1 = (libav::IAFrame *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAFrame **)&jarg1; 
  result = (uint32_t)((libav::IAFrame const *)arg1)->GetSampleRate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAFrame_1GetChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IAFrame *arg1 = (libav::IAFrame *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAFrame **)&jarg1; 
  result = (uint32_t)((libav::IAFrame const *)arg1)->GetChannels();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAFrame_1GetBitsPerSample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IAFrame *arg1 = (libav::IAFrame *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAFrame **)&jarg1; 
  result = (uint32_t)((libav::IAFrame const *)arg1)->GetBitsPerSample();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAFrame_1GetSampleCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IAFrame *arg1 = (libav::IAFrame *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAFrame **)&jarg1; 
  result = (uint32_t)((libav::IAFrame const *)arg1)->GetSampleCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IAFrame_1GetSampleData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::IAFrame *arg1 = (libav::IAFrame *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAFrame **)&jarg1; 
  result = (void *)((libav::IAFrame const *)arg1)->GetSampleData();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAFrame_1SetSampleCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libav::IAFrame *arg1 = (libav::IAFrame *) 0 ;
  uint32_t arg2 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IAFrame **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (StatusCode)(arg1)->SetSampleCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVCreateFrame(JNIEnv *jenv, jclass jcls, jint jarg1, jobject jarg2) {
  jint jresult = 0 ;
  libav::EFrameType arg1 ;
  libav::IFrame **arg2 = (libav::IFrame **) 0 ;
  libav::IFrame *ppObject2 = 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (libav::EFrameType)jarg1; 
  
  arg2 = &ppObject2;
  
  result = (StatusCode)libav::AVCreateFrame(arg1,arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = jenv->FindClass("com/ds/libav/jni/IFrame");
    jfieldID fid = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(libav::IFrame **)&cPtr = *arg2;
    jenv->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IPacket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::IPacket **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacket_1GetStreamIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacket **)&jarg1; 
  result = (int32_t)((libav::IPacket const *)arg1)->GetStreamIndex();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacket_1GetPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacket **)&jarg1; 
  result = (int64_t)((libav::IPacket const *)arg1)->GetPts();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacket_1GetDts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacket **)&jarg1; 
  result = (int64_t)((libav::IPacket const *)arg1)->GetDts();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacket_1GetDataPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacket **)&jarg1; 
  result = (uint8_t *)((libav::IPacket const *)arg1)->GetDataPtr();
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacket_1GetDataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacket **)&jarg1; 
  result = (uint32_t)((libav::IPacket const *)arg1)->GetDataSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacket_1GetDataLen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacket **)&jarg1; 
  result = (uint32_t)((libav::IPacket const *)arg1)->GetDataLen();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacket_1GetReadPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacket **)&jarg1; 
  result = (uint32_t)((libav::IPacket const *)arg1)->GetReadPos();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacket_1GetReadPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacket **)&jarg1; 
  result = (int64_t)((libav::IPacket const *)arg1)->GetReadPts();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacket_1GetDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacket **)&jarg1; 
  result = (int64_t)((libav::IPacket const *)arg1)->GetDuration();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacket_1SetStreamIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacket **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->SetStreamIndex(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacket_1SetPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacket **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  (arg1)->SetPts(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacket_1SetReadPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacket **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  (arg1)->SetReadPts(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacket_1SetReadPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacket **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->SetReadPos(arg2);
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacket_1CopyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  libav::IPacket *arg2 = (libav::IPacket *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libav::IPacket **)&jarg1; 
  arg2 = *(libav::IPacket **)&jarg2; 
  result = (StatusCode)(arg1)->CopyFrom((libav::IPacket const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacket_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  uint8_t **arg2 = (uint8_t **) 0 ;
  uint32_t arg3 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacket **)&jarg1; 
  arg2 = *(uint8_t ***)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (uint32_t)(arg1)->Read(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacket_1AllRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacket **)&jarg1; 
  result = (bool)((libav::IPacket const *)arg1)->AllRead();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacket_1Free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libav::IPacket *arg1 = (libav::IPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacket **)&jarg1; 
  (arg1)->Free();
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVCreatePacket(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jint jresult = 0 ;
  libav::IPacket **arg1 = (libav::IPacket **) 0 ;
  libav::IPacket *ppObject1 = 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = &ppObject1;
  
  result = (StatusCode)libav::AVCreatePacket(arg1);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = jenv->FindClass("com/ds/libav/jni/IPacket");
    jfieldID fid = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(libav::IPacket **)&cPtr = *arg1;
    jenv->SetLongField(jarg1, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::IStream *arg1 = (libav::IStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::IStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IStream_1GetStreamType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IStream *arg1 = (libav::IStream *) 0 ;
  libav::EStreamType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IStream **)&jarg1; 
  result = (libav::EStreamType)((libav::IStream const *)arg1)->GetStreamType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVCreateStream(JNIEnv *jenv, jclass jcls, jobject jarg1, jint jarg2) {
  jint jresult = 0 ;
  libav::IStream **arg1 = (libav::IStream **) 0 ;
  libav::EStreamType arg2 ;
  libav::IStream *ppObject1 = 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = &ppObject1;
  
  arg2 = (libav::EStreamType)jarg2; 
  result = (StatusCode)libav::AVCreateStream(arg1,arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = jenv->FindClass("com/ds/libav/jni/IStream");
    jfieldID fid = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(libav::IStream **)&cPtr = *arg1;
    jenv->SetLongField(jarg1, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1InputStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::InputStream *arg1 = (libav::InputStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::InputStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_InputStream_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  libav::InputStream *arg1 = (libav::InputStream *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32_t arg3 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::InputStream **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (StatusCode)(arg1)->Read(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_InputStream_1Seek(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  libav::InputStream *arg1 = (libav::InputStream *) 0 ;
  int64_t arg2 ;
  libav::EIOSeekFlag arg3 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::InputStream **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (libav::EIOSeekFlag)jarg3; 
  result = (StatusCode)(arg1)->Seek(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_InputStream_1EOFReached(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libav::InputStream *arg1 = (libav::InputStream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::InputStream **)&jarg1; 
  result = (bool)((libav::InputStream const *)arg1)->EOFReached();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IPacketStreamBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::IItemStream< libav::IPacket > *arg1 = (libav::IItemStream< libav::IPacket > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::IItemStream< libav::IPacket > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacketStreamBase_1GetItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  libav::IItemStream< libav::IPacket > *arg1 = (libav::IItemStream< libav::IPacket > *) 0 ;
  libav::IPacket **arg2 = (libav::IPacket **) 0 ;
  libav::IPacket *ppObject2 = 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IItemStream< libav::IPacket > **)&jarg1; 
  
  arg2 = &ppObject2;
  
  result = (StatusCode)(arg1)->GetItem(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = jenv->FindClass("com/ds/libav/jni/IPacket");
    jfieldID fid = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(libav::IPacket **)&cPtr = *arg2;
    jenv->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacketStreamBase_1PopItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libav::IItemStream< libav::IPacket > *arg1 = (libav::IItemStream< libav::IPacket > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IItemStream< libav::IPacket > **)&jarg1; 
  (arg1)->PopItem();
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacketStreamBase_1GetItemCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IItemStream< libav::IPacket > *arg1 = (libav::IItemStream< libav::IPacket > *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IItemStream< libav::IPacket > **)&jarg1; 
  result = (uint32_t)((libav::IItemStream< libav::IPacket > const *)arg1)->GetItemCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacketStreamBase_1Reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libav::IItemStream< libav::IPacket > *arg1 = (libav::IItemStream< libav::IPacket > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IItemStream< libav::IPacket > **)&jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacketStreamBase_1Extend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::IItemStream< libav::IPacket > *arg1 = (libav::IItemStream< libav::IPacket > *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IItemStream< libav::IPacket > **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->Extend(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IPictureStreamBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::IItemStream< libav::IPicture > *arg1 = (libav::IItemStream< libav::IPicture > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::IItemStream< libav::IPicture > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IPictureStreamBase_1GetItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  libav::IItemStream< libav::IPicture > *arg1 = (libav::IItemStream< libav::IPicture > *) 0 ;
  libav::IPicture **arg2 = (libav::IPicture **) 0 ;
  libav::IPicture *ppObject2 = 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IItemStream< libav::IPicture > **)&jarg1; 
  
  arg2 = &ppObject2;
  
  result = (StatusCode)(arg1)->GetItem(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = jenv->FindClass("com/ds/libav/jni/IPicture");
    jfieldID fid = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(libav::IPicture **)&cPtr = *arg2;
    jenv->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IPictureStreamBase_1PopItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libav::IItemStream< libav::IPicture > *arg1 = (libav::IItemStream< libav::IPicture > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IItemStream< libav::IPicture > **)&jarg1; 
  (arg1)->PopItem();
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IPictureStreamBase_1GetItemCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IItemStream< libav::IPicture > *arg1 = (libav::IItemStream< libav::IPicture > *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IItemStream< libav::IPicture > **)&jarg1; 
  result = (uint32_t)((libav::IItemStream< libav::IPicture > const *)arg1)->GetItemCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IPictureStreamBase_1Reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libav::IItemStream< libav::IPicture > *arg1 = (libav::IItemStream< libav::IPicture > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IItemStream< libav::IPicture > **)&jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IPictureStreamBase_1Extend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::IItemStream< libav::IPicture > *arg1 = (libav::IItemStream< libav::IPicture > *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IItemStream< libav::IPicture > **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->Extend(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IFrameStreamBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::IItemStream< libav::IFrame > *arg1 = (libav::IItemStream< libav::IFrame > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::IItemStream< libav::IFrame > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IFrameStreamBase_1GetItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  libav::IItemStream< libav::IFrame > *arg1 = (libav::IItemStream< libav::IFrame > *) 0 ;
  libav::IFrame **arg2 = (libav::IFrame **) 0 ;
  libav::IFrame *ppObject2 = 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IItemStream< libav::IFrame > **)&jarg1; 
  
  arg2 = &ppObject2;
  
  result = (StatusCode)(arg1)->GetItem(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = jenv->FindClass("com/ds/libav/jni/IFrame");
    jfieldID fid = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(libav::IFrame **)&cPtr = *arg2;
    jenv->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IFrameStreamBase_1PopItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libav::IItemStream< libav::IFrame > *arg1 = (libav::IItemStream< libav::IFrame > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IItemStream< libav::IFrame > **)&jarg1; 
  (arg1)->PopItem();
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IFrameStreamBase_1GetItemCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IItemStream< libav::IFrame > *arg1 = (libav::IItemStream< libav::IFrame > *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IItemStream< libav::IFrame > **)&jarg1; 
  result = (uint32_t)((libav::IItemStream< libav::IFrame > const *)arg1)->GetItemCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IFrameStreamBase_1Reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libav::IItemStream< libav::IFrame > *arg1 = (libav::IItemStream< libav::IFrame > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IItemStream< libav::IFrame > **)&jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IFrameStreamBase_1Extend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libav::IItemStream< libav::IFrame > *arg1 = (libav::IItemStream< libav::IFrame > *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IItemStream< libav::IFrame > **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->Extend(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IPacketStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::IPacketStream *arg1 = (libav::IPacketStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::IPacketStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacketStream_1GetStreamIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::IPacketStream *arg1 = (libav::IPacketStream *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacketStream **)&jarg1; 
  result = (uint32_t)((libav::IPacketStream const *)arg1)->GetStreamIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacketStream_1GetTimebase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::IPacketStream *arg1 = (libav::IPacketStream *) 0 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacketStream **)&jarg1; 
  result = ((libav::IPacketStream const *)arg1)->GetTimebase();
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacketStream_1GetFrameRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::IPacketStream *arg1 = (libav::IPacketStream *) 0 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IPacketStream **)&jarg1; 
  result = ((libav::IPacketStream const *)arg1)->GetFrameRate();
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IFrameStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::IFrameStream *arg1 = (libav::IFrameStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::IFrameStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IFrameStream_1GetTimebase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::IFrameStream *arg1 = (libav::IFrameStream *) 0 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IFrameStream **)&jarg1; 
  result = ((libav::IFrameStream const *)arg1)->GetTimebase();
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IFrameStream_1GetFrameRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libav::IFrameStream *arg1 = (libav::IFrameStream *) 0 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::IFrameStream **)&jarg1; 
  result = ((libav::IFrameStream const *)arg1)->GetFrameRate();
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IPictureStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::IPictureStream *arg1 = (libav::IPictureStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::IPictureStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1ILogReceiver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::ILogReceiver *arg1 = (libav::ILogReceiver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::ILogReceiver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ILogReceiver_1Receive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  libav::ILogReceiver *arg1 = (libav::ILogReceiver *) 0 ;
  libav::ELogLevel arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::ILogReceiver **)&jarg1; 
  arg2 = (libav::ELogLevel)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->Receive(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ILogReceiver_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  libav::ILogReceiver *obj = *((libav::ILogReceiver **)&objarg);
  (void)jcls;
  SwigDirector_ILogReceiver *director = dynamic_cast<SwigDirector_ILogReceiver *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ILogReceiver_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  libav::ILogReceiver *obj = *((libav::ILogReceiver **)&objarg);
  SwigDirector_ILogReceiver *director = dynamic_cast<SwigDirector_ILogReceiver *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVLogAddReceiver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libav::ILogReceiver *arg1 = (libav::ILogReceiver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::ILogReceiver **)&jarg1; 
  libav::AVLogAddReceiver(arg1);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVLogRemoveReceiver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libav::ILogReceiver *arg1 = (libav::ILogReceiver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::ILogReceiver **)&jarg1; 
  libav::AVLogRemoveReceiver((libav::ILogReceiver const *)arg1);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVLogSetLevel(JNIEnv *jenv, jclass jcls, jint jarg1) {
  libav::ELogLevel arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (libav::ELogLevel)jarg1; 
  libav::AVLogSetLevel(arg1);
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVLogGetLevel(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libav::ELogLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (libav::ELogLevel)libav::AVLogGetLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVLOG(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  libav::ELogLevel arg1 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (libav::ELogLevel)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  libav::AVLOG(arg1,(char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AVLOGS(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3) {
  libav::ELogLevel arg1 ;
  StatusCode arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (libav::ELogLevel)jarg1; 
  arg2 = (StatusCode)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  libav::AVLOGS(arg1,arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AVCreateLogReceiver(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jint jresult = 0 ;
  libav::ILogReceiver **arg1 = (libav::ILogReceiver **) 0 ;
  libav::ILogReceiver *ppObject1 = 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = &ppObject1;
  
  result = (StatusCode)libav::AVCreateLogReceiver(arg1);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = jenv->FindClass("com/ds/libav/jni/ILogReceiver");
    jfieldID fid = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(libav::ILogReceiver **)&cPtr = *arg1;
    jenv->SetLongField(jarg1, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_RC_1AddRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libav::RC *arg1 = (libav::RC *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::RC **)&jarg1; 
  (arg1)->AddRef();
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_RC_1Release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libav::RC *arg1 = (libav::RC *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libav::RC **)&jarg1; 
  result = (int)(arg1)->Release();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1RC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libav::RC *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libav::RC *)new libav::RC();
  *(libav::RC **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1RC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libav::RC *arg1 = (libav::RC *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libav::RC **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_GSize_1nWidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::GSize *arg1 = (xedit::GSize *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::GSize **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nWidth = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_GSize_1nWidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::GSize *arg1 = (xedit::GSize *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::GSize **)&jarg1; 
  result = (int) ((arg1)->nWidth);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_GSize_1nHeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::GSize *arg1 = (xedit::GSize *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::GSize **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nHeight = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_GSize_1nHeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::GSize *arg1 = (xedit::GSize *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::GSize **)&jarg1; 
  result = (int) ((arg1)->nHeight);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1GSize_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::GSize *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::GSize *)new xedit::GSize();
  *(xedit::GSize **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1GSize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  xedit::GSize *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (xedit::GSize *)new xedit::GSize(arg1,arg2);
  *(xedit::GSize **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1GSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::GSize *arg1 = (xedit::GSize *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::GSize **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IBuffer *arg1 = (xedit::IBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IBuffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IBuffer_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::IBuffer *arg1 = (xedit::IBuffer *) 0 ;
  xedit::EBufferType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IBuffer **)&jarg1; 
  result = (xedit::EBufferType)((xedit::IBuffer const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1IBuffer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::IBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::IBuffer *)new SwigDirector_IBuffer(jenv);
  *(xedit::IBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IBuffer_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  xedit::IBuffer *obj = *((xedit::IBuffer **)&objarg);
  (void)jcls;
  SwigDirector_IBuffer *director = dynamic_cast<SwigDirector_IBuffer *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IBuffer_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  xedit::IBuffer *obj = *((xedit::IBuffer **)&objarg);
  SwigDirector_IBuffer *director = dynamic_cast<SwigDirector_IBuffer *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IVideoBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IVideoBuffer *arg1 = (xedit::IVideoBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IVideoBuffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IVideoBuffer_1getVideoRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IVideoBuffer *arg1 = (xedit::IVideoBuffer *) 0 ;
  xedit::GSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IVideoBuffer **)&jarg1; 
  result = ((xedit::IVideoBuffer const *)arg1)->getVideoRect();
  *(xedit::GSize **)&jresult = new xedit::GSize((const xedit::GSize &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IVideoBuffer_1getPixelFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::IVideoBuffer *arg1 = (xedit::IVideoBuffer *) 0 ;
  libav::EPixFormat result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IVideoBuffer **)&jarg1; 
  result = (libav::EPixFormat)((xedit::IVideoBuffer const *)arg1)->getPixelFormat();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IVideoBuffer_1getLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::IVideoBuffer *arg1 = (xedit::IVideoBuffer *) 0 ;
  xedit::EBufferLocation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IVideoBuffer **)&jarg1; 
  result = (xedit::EBufferLocation)((xedit::IVideoBuffer const *)arg1)->getLocation();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IVideoBuffer_1getPlaneCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::IVideoBuffer *arg1 = (xedit::IVideoBuffer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IVideoBuffer **)&jarg1; 
  result = (int)((xedit::IVideoBuffer const *)arg1)->getPlaneCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IVideoBuffer_1getPlanePointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  xedit::IVideoBuffer *arg1 = (xedit::IVideoBuffer *) 0 ;
  int arg2 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IVideoBuffer **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (uint8_t *)((xedit::IVideoBuffer const *)arg1)->getPlanePointer(arg2);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IVideoBuffer_1getPlaneLineSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  xedit::IVideoBuffer *arg1 = (xedit::IVideoBuffer *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IVideoBuffer **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((xedit::IVideoBuffer const *)arg1)->getPlaneLineSize(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IVideoBuffer_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  xedit::IVideoBuffer *arg1 = (xedit::IVideoBuffer *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IVideoBuffer **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((xedit::IVideoBuffer const *)arg1)->getSize(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1IVideoBuffer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::IVideoBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::IVideoBuffer *)new SwigDirector_IVideoBuffer(jenv);
  *(xedit::IVideoBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IVideoBuffer_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  xedit::IVideoBuffer *obj = *((xedit::IVideoBuffer **)&objarg);
  (void)jcls;
  SwigDirector_IVideoBuffer *director = dynamic_cast<SwigDirector_IVideoBuffer *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IVideoBuffer_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  xedit::IVideoBuffer *obj = *((xedit::IVideoBuffer **)&objarg);
  SwigDirector_IVideoBuffer *director = dynamic_cast<SwigDirector_IVideoBuffer *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IRenderer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IRenderer *arg1 = (xedit::IRenderer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IRenderer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IRenderer_1render(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  xedit::IRenderer *arg1 = (xedit::IRenderer *) 0 ;
  xedit::IBuffer *arg2 = (xedit::IBuffer *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::IRenderer **)&jarg1; 
  arg2 = *(xedit::IBuffer **)&jarg2; 
  result = (StatusCode)(arg1)->render(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1IRenderer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::IRenderer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::IRenderer *)new SwigDirector_IRenderer(jenv);
  *(xedit::IRenderer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IRenderer_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  xedit::IRenderer *obj = *((xedit::IRenderer **)&objarg);
  (void)jcls;
  SwigDirector_IRenderer *director = dynamic_cast<SwigDirector_IRenderer *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IRenderer_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  xedit::IRenderer *obj = *((xedit::IRenderer **)&objarg);
  SwigDirector_IRenderer *director = dynamic_cast<SwigDirector_IRenderer *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IVideoRenderer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IVideoRenderer *arg1 = (xedit::IVideoRenderer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IVideoRenderer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IVideoRenderer_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  xedit::IVideoRenderer *arg1 = (xedit::IVideoRenderer *) 0 ;
  int arg2 ;
  int arg3 ;
  libav::EPixFormat arg4 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IVideoRenderer **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (libav::EPixFormat)jarg4; 
  result = (StatusCode)(arg1)->init(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1IVideoRenderer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::IVideoRenderer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::IVideoRenderer *)new SwigDirector_IVideoRenderer(jenv);
  *(xedit::IVideoRenderer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IVideoRenderer_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  xedit::IVideoRenderer *obj = *((xedit::IVideoRenderer **)&objarg);
  (void)jcls;
  SwigDirector_IVideoRenderer *director = dynamic_cast<SwigDirector_IVideoRenderer *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IVideoRenderer_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  xedit::IVideoRenderer *obj = *((xedit::IVideoRenderer **)&objarg);
  SwigDirector_IVideoRenderer *director = dynamic_cast<SwigDirector_IVideoRenderer *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IAudioRenderer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IAudioRenderer *arg1 = (xedit::IAudioRenderer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IAudioRenderer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAudioRenderer_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  xedit::IAudioRenderer *arg1 = (xedit::IAudioRenderer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  libav::ESampleFormat arg5 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IAudioRenderer **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (libav::ESampleFormat)jarg5; 
  result = (StatusCode)(arg1)->init(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1IAudioRenderer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::IAudioRenderer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::IAudioRenderer *)new SwigDirector_IAudioRenderer(jenv);
  *(xedit::IAudioRenderer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IAudioRenderer_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  xedit::IAudioRenderer *obj = *((xedit::IAudioRenderer **)&objarg);
  (void)jcls;
  SwigDirector_IAudioRenderer *director = dynamic_cast<SwigDirector_IAudioRenderer *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IAudioRenderer_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  xedit::IAudioRenderer *obj = *((xedit::IAudioRenderer **)&objarg);
  SwigDirector_IAudioRenderer *director = dynamic_cast<SwigDirector_IAudioRenderer *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IInputStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IInputStream *arg1 = (xedit::IInputStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IInputStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IInputStream_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  xedit::IInputStream *arg1 = (xedit::IInputStream *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IInputStream **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->read(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IInputStream_1seek(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  xedit::IInputStream *arg1 = (xedit::IInputStream *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IInputStream **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (int64_t)(arg1)->seek(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IInputStream_1available(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IInputStream *arg1 = (xedit::IInputStream *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IInputStream **)&jarg1; 
  result = (int64_t)(arg1)->available();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IInputStream_1skip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  xedit::IInputStream *arg1 = (xedit::IInputStream *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IInputStream **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (int64_t)(arg1)->skip(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IInputStream_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::IInputStream *arg1 = (xedit::IInputStream *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IInputStream **)&jarg1; 
  result = (StatusCode)(arg1)->close();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1IInputStream(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::IInputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::IInputStream *)new SwigDirector_IInputStream(jenv);
  *(xedit::IInputStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IInputStream_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  xedit::IInputStream *obj = *((xedit::IInputStream **)&objarg);
  (void)jcls;
  SwigDirector_IInputStream *director = dynamic_cast<SwigDirector_IInputStream *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IInputStream_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  xedit::IInputStream *obj = *((xedit::IInputStream **)&objarg);
  SwigDirector_IInputStream *director = dynamic_cast<SwigDirector_IInputStream *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IObserver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IObserver *arg1 = (xedit::IObserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IObserver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1IObserver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::IObserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::IObserver *)new SwigDirector_IObserver(jenv);
  *(xedit::IObserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IObserver_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  xedit::IObserver *obj = *((xedit::IObserver **)&objarg);
  (void)jcls;
  SwigDirector_IObserver *director = dynamic_cast<SwigDirector_IObserver *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IObserver_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  xedit::IObserver *obj = *((xedit::IObserver **)&objarg);
  SwigDirector_IObserver *director = dynamic_cast<SwigDirector_IObserver *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IObservable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IObservable *arg1 = (xedit::IObservable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IObservable **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IObservable_1addObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::IObservable *arg1 = (xedit::IObservable *) 0 ;
  xedit::IObserver *arg2 = (xedit::IObserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::IObservable **)&jarg1; 
  arg2 = *(xedit::IObserver **)&jarg2; 
  (arg1)->addObserver(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IObservable_1deleteObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::IObservable *arg1 = (xedit::IObservable *) 0 ;
  xedit::IObserver *arg2 = (xedit::IObserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::IObservable **)&jarg1; 
  arg2 = *(xedit::IObserver **)&jarg2; 
  (arg1)->deleteObserver(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IObservable_1deleteAllObservers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  xedit::IObservable *arg1 = (xedit::IObservable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IObservable **)&jarg1; 
  (arg1)->deleteAllObservers();
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IObservable_1getObserverCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::IObservable *arg1 = (xedit::IObservable *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IObservable **)&jarg1; 
  result = (int)(arg1)->getObserverCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IObservable_1getObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  xedit::IObservable *arg1 = (xedit::IObservable *) 0 ;
  int arg2 ;
  xedit::IObserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IObservable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (xedit::IObserver *)(arg1)->getObserver(arg2);
  *(xedit::IObserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IObservable_1notifyAllObservers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  xedit::IObservable *arg1 = (xedit::IObservable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IObservable **)&jarg1; 
  (arg1)->notifyAllObservers();
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1IObservable(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::IObservable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::IObservable *)new SwigDirector_IObservable(jenv);
  *(xedit::IObservable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IObservable_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  xedit::IObservable *obj = *((xedit::IObservable **)&objarg);
  (void)jcls;
  SwigDirector_IObservable *director = dynamic_cast<SwigDirector_IObservable *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IObservable_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  xedit::IObservable *obj = *((xedit::IObservable **)&objarg);
  SwigDirector_IObservable *director = dynamic_cast<SwigDirector_IObservable *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IOutputStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IOutputStream *arg1 = (xedit::IOutputStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IOutputStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IOutputStream_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  xedit::IOutputStream *arg1 = (xedit::IOutputStream *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IOutputStream **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->write((uint8_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IOutputStream_1flush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::IOutputStream *arg1 = (xedit::IOutputStream *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IOutputStream **)&jarg1; 
  result = (StatusCode)(arg1)->flush();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IOutputStream_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::IOutputStream *arg1 = (xedit::IOutputStream *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IOutputStream **)&jarg1; 
  result = (StatusCode)(arg1)->close();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IOutputStream_1seek(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  xedit::IOutputStream *arg1 = (xedit::IOutputStream *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IOutputStream **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (int64_t)(arg1)->seek(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1IOutputStream(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::IOutputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::IOutputStream *)new SwigDirector_IOutputStream(jenv);
  *(xedit::IOutputStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IOutputStream_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  xedit::IOutputStream *obj = *((xedit::IOutputStream **)&objarg);
  (void)jcls;
  SwigDirector_IOutputStream *director = dynamic_cast<SwigDirector_IOutputStream *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IOutputStream_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  xedit::IOutputStream *obj = *((xedit::IOutputStream **)&objarg);
  SwigDirector_IOutputStream *director = dynamic_cast<SwigDirector_IOutputStream *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_idGenerateOne(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int64_t)idGenerateOne();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1CInputStream(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::CInputStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::CInputStream *)new xedit::CInputStream();
  *(xedit::CInputStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1CInputStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::CInputStream *arg1 = (xedit::CInputStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::CInputStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_CInputStream_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  xedit::CInputStream *arg1 = (xedit::CInputStream *) 0 ;
  char *arg2 = (char *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CInputStream **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (StatusCode)(arg1)->open((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_CInputStream_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  xedit::CInputStream *arg1 = (xedit::CInputStream *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CInputStream **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->read(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_CInputStream_1seek(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  xedit::CInputStream *arg1 = (xedit::CInputStream *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CInputStream **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (int64_t)(arg1)->seek(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_CInputStream_1available(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::CInputStream *arg1 = (xedit::CInputStream *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CInputStream **)&jarg1; 
  result = (int64_t)(arg1)->available();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_CInputStream_1skip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  xedit::CInputStream *arg1 = (xedit::CInputStream *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CInputStream **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (int64_t)(arg1)->skip(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_CInputStream_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::CInputStream *arg1 = (xedit::CInputStream *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CInputStream **)&jarg1; 
  result = (StatusCode)(arg1)->close();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1COutputFileStream(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::COutputFileStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::COutputFileStream *)new xedit::COutputFileStream();
  *(xedit::COutputFileStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1COutputFileStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::COutputFileStream *arg1 = (xedit::COutputFileStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::COutputFileStream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_COutputFileStream_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  xedit::COutputFileStream *arg1 = (xedit::COutputFileStream *) 0 ;
  char *arg2 = (char *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::COutputFileStream **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (StatusCode)(arg1)->open((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_COutputFileStream_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  xedit::COutputFileStream *arg1 = (xedit::COutputFileStream *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::COutputFileStream **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->write((uint8_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_COutputFileStream_1flush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::COutputFileStream *arg1 = (xedit::COutputFileStream *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::COutputFileStream **)&jarg1; 
  result = (StatusCode)(arg1)->flush();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_COutputFileStream_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::COutputFileStream *arg1 = (xedit::COutputFileStream *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::COutputFileStream **)&jarg1; 
  result = (StatusCode)(arg1)->close();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_COutputFileStream_1seek(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  xedit::COutputFileStream *arg1 = (xedit::COutputFileStream *) 0 ;
  int64_t arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::COutputFileStream **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (int64_t)(arg1)->seek(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IDictionary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IDictionary *arg1 = (IDictionary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IDictionary **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IDictionary_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  IDictionary *arg1 = (IDictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IDictionary **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->set((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_IDictionary_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  IDictionary *arg1 = (IDictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IDictionary **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((IDictionary const *)arg1)->contains((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_IDictionary_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  IDictionary *arg1 = (IDictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IDictionary **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)((IDictionary const *)arg1)->get((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IDictionary_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  IDictionary *arg1 = (IDictionary *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IDictionary **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->remove((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_createDictionary(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IDictionary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IDictionary *)createDictionary();
  *(IDictionary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_Image_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::Image *arg1 = (xedit::Image *) 0 ;
  xedit::EImageType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::Image **)&jarg1; 
  arg2 = (xedit::EImageType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_Image_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::Image *arg1 = (xedit::Image *) 0 ;
  xedit::EImageType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::Image **)&jarg1; 
  result = (xedit::EImageType) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_Image_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xedit::Image *arg1 = (xedit::Image *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::Image **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_Image_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xedit::Image *arg1 = (xedit::Image *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::Image **)&jarg1; 
  result = (std::string *) & ((arg1)->path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_Image_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::Image *arg1 = (xedit::Image *) 0 ;
  xedit::GSize *arg2 = (xedit::GSize *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::Image **)&jarg1; 
  arg2 = *(xedit::GSize **)&jarg2; 
  if (arg1) (arg1)->size = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_Image_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::Image *arg1 = (xedit::Image *) 0 ;
  xedit::GSize *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::Image **)&jarg1; 
  result = (xedit::GSize *)& ((arg1)->size);
  *(xedit::GSize **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1Image(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::Image *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::Image *)new xedit::Image();
  *(xedit::Image **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1Image(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::Image *arg1 = (xedit::Image *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::Image **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_xSaveImage(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jint jarg8) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  libav::EPixFormat arg3 ;
  int arg4 ;
  int arg5 ;
  xedit::GSize arg6 ;
  xedit::GSize arg7 ;
  xedit::EImageType arg8 ;
  xedit::GSize *argp6 ;
  xedit::GSize *argp7 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (libav::EPixFormat)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = *(xedit::GSize **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null xedit::GSize");
    return 0;
  }
  arg6 = *argp6; 
  argp7 = *(xedit::GSize **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null xedit::GSize");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (xedit::EImageType)jarg8; 
  result = (StatusCode)xedit::xSaveImage((char const *)arg1,(unsigned char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_xScaleImage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  xedit::GSize arg3 ;
  xedit::EImageType arg4 ;
  xedit::GSize *argp3 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  argp3 = *(xedit::GSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null xedit::GSize");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (xedit::EImageType)jarg4; 
  result = (StatusCode)xedit::xScaleImage((char const *)arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_xScaleImage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  xedit::GSize arg3 ;
  xedit::GSize *argp3 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  argp3 = *(xedit::GSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null xedit::GSize");
    return 0;
  }
  arg3 = *argp3; 
  result = (StatusCode)xedit::xScaleImage((char const *)arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1IDPtr(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IDPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IDPtr *)new_IDPtr();
  *(IDPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IDPtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IDPtr *arg1 = (IDPtr *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IDPtr **)&jarg1; 
  delete_IDPtr(arg1);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IDPtr_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  IDPtr *arg1 = (IDPtr *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IDPtr **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  IDPtr_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IDPtr_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IDPtr *arg1 = (IDPtr *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IDPtr **)&jarg1; 
  result = (int64_t)IDPtr_value(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IDPtr_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IDPtr *arg1 = (IDPtr *) 0 ;
  int64_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IDPtr **)&jarg1; 
  result = (int64_t *)IDPtr_cast(arg1);
  *(int64_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IDPtr_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int64_t *arg1 = (int64_t *) 0 ;
  IDPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int64_t **)&jarg1; 
  result = (IDPtr *)IDPtr_frompointer(arg1);
  *(IDPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_CodecParam_1eCodecID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::CodecParam *arg1 = (xedit::CodecParam *) 0 ;
  libav::ECodecID arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CodecParam **)&jarg1; 
  arg2 = (libav::ECodecID)jarg2; 
  if (arg1) (arg1)->eCodecID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_CodecParam_1eCodecID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::CodecParam *arg1 = (xedit::CodecParam *) 0 ;
  libav::ECodecID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CodecParam **)&jarg1; 
  result = (libav::ECodecID) ((arg1)->eCodecID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_CodecParam_1eCodecProfile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::CodecParam *arg1 = (xedit::CodecParam *) 0 ;
  libav::ECodecProfile arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CodecParam **)&jarg1; 
  arg2 = (libav::ECodecProfile)jarg2; 
  if (arg1) (arg1)->eCodecProfile = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_CodecParam_1eCodecProfile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::CodecParam *arg1 = (xedit::CodecParam *) 0 ;
  libav::ECodecProfile result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CodecParam **)&jarg1; 
  result = (libav::ECodecProfile) ((arg1)->eCodecProfile);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_CodecParam_1eCodecLevel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::CodecParam *arg1 = (xedit::CodecParam *) 0 ;
  libav::ECodecLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CodecParam **)&jarg1; 
  arg2 = (libav::ECodecLevel)jarg2; 
  if (arg1) (arg1)->eCodecLevel = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_CodecParam_1eCodecLevel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::CodecParam *arg1 = (xedit::CodecParam *) 0 ;
  libav::ECodecLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CodecParam **)&jarg1; 
  result = (libav::ECodecLevel) ((arg1)->eCodecLevel);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_CodecParam_1eBitrateMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::CodecParam *arg1 = (xedit::CodecParam *) 0 ;
  libav::EBitrateMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CodecParam **)&jarg1; 
  arg2 = (libav::EBitrateMode)jarg2; 
  if (arg1) (arg1)->eBitrateMode = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_CodecParam_1eBitrateMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::CodecParam *arg1 = (xedit::CodecParam *) 0 ;
  libav::EBitrateMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CodecParam **)&jarg1; 
  result = (libav::EBitrateMode) ((arg1)->eBitrateMode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_CodecParam_1nBitrate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::CodecParam *arg1 = (xedit::CodecParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CodecParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nBitrate = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_CodecParam_1nBitrate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::CodecParam *arg1 = (xedit::CodecParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CodecParam **)&jarg1; 
  result = (int) ((arg1)->nBitrate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_CodecParam_1reserved_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  xedit::CodecParam *arg1 = (xedit::CodecParam *) 0 ;
  uint8_t *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CodecParam **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 64) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->reserved;
    for (ii = 0; ii < (size_t)64; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_com_ds_xedit_jni_xeditJNI_CodecParam_1reserved_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  xedit::CodecParam *arg1 = (xedit::CodecParam *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::CodecParam **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->reserved);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 64); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1CodecParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::CodecParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::CodecParam *)new xedit::CodecParam();
  *(xedit::CodecParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1CodecParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::CodecParam *arg1 = (xedit::CodecParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::CodecParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoCodecParam_1ePixFormat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::VideoCodecParam *arg1 = (xedit::VideoCodecParam *) 0 ;
  libav::EPixFormat arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::VideoCodecParam **)&jarg1; 
  arg2 = (libav::EPixFormat)jarg2; 
  if (arg1) (arg1)->ePixFormat = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoCodecParam_1ePixFormat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::VideoCodecParam *arg1 = (xedit::VideoCodecParam *) 0 ;
  libav::EPixFormat result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::VideoCodecParam **)&jarg1; 
  result = (libav::EPixFormat) ((arg1)->ePixFormat);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoCodecParam_1nWidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::VideoCodecParam *arg1 = (xedit::VideoCodecParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::VideoCodecParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nWidth = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoCodecParam_1nWidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::VideoCodecParam *arg1 = (xedit::VideoCodecParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::VideoCodecParam **)&jarg1; 
  result = (int) ((arg1)->nWidth);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoCodecParam_1nHeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::VideoCodecParam *arg1 = (xedit::VideoCodecParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::VideoCodecParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nHeight = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoCodecParam_1nHeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::VideoCodecParam *arg1 = (xedit::VideoCodecParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::VideoCodecParam **)&jarg1; 
  result = (int) ((arg1)->nHeight);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoCodecParam_1bInterlaced_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  xedit::VideoCodecParam *arg1 = (xedit::VideoCodecParam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::VideoCodecParam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bInterlaced = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoCodecParam_1bInterlaced_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xedit::VideoCodecParam *arg1 = (xedit::VideoCodecParam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::VideoCodecParam **)&jarg1; 
  result = (bool) ((arg1)->bInterlaced);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoCodecParam_1bTopFieldFirst_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  xedit::VideoCodecParam *arg1 = (xedit::VideoCodecParam *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::VideoCodecParam **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bTopFieldFirst = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoCodecParam_1bTopFieldFirst_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xedit::VideoCodecParam *arg1 = (xedit::VideoCodecParam *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::VideoCodecParam **)&jarg1; 
  result = (bool) ((arg1)->bTopFieldFirst);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoCodecParam_1reserved_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  xedit::VideoCodecParam *arg1 = (xedit::VideoCodecParam *) 0 ;
  uint8_t *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::VideoCodecParam **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 64) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->reserved;
    for (ii = 0; ii < (size_t)64; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoCodecParam_1reserved_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  xedit::VideoCodecParam *arg1 = (xedit::VideoCodecParam *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::VideoCodecParam **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->reserved);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 64); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1VideoCodecParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::VideoCodecParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::VideoCodecParam *)new xedit::VideoCodecParam();
  *(xedit::VideoCodecParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1VideoCodecParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::VideoCodecParam *arg1 = (xedit::VideoCodecParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::VideoCodecParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioCodecParam_1eSampleFmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::AudioCodecParam *arg1 = (xedit::AudioCodecParam *) 0 ;
  libav::ESampleFormat arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::AudioCodecParam **)&jarg1; 
  arg2 = (libav::ESampleFormat)jarg2; 
  if (arg1) (arg1)->eSampleFmt = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioCodecParam_1eSampleFmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::AudioCodecParam *arg1 = (xedit::AudioCodecParam *) 0 ;
  libav::ESampleFormat result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::AudioCodecParam **)&jarg1; 
  result = (libav::ESampleFormat) ((arg1)->eSampleFmt);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioCodecParam_1nSampleRate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::AudioCodecParam *arg1 = (xedit::AudioCodecParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::AudioCodecParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nSampleRate = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioCodecParam_1nSampleRate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::AudioCodecParam *arg1 = (xedit::AudioCodecParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::AudioCodecParam **)&jarg1; 
  result = (int) ((arg1)->nSampleRate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioCodecParam_1nBitsPerSample_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::AudioCodecParam *arg1 = (xedit::AudioCodecParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::AudioCodecParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nBitsPerSample = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioCodecParam_1nBitsPerSample_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::AudioCodecParam *arg1 = (xedit::AudioCodecParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::AudioCodecParam **)&jarg1; 
  result = (int) ((arg1)->nBitsPerSample);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioCodecParam_1nChannels_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::AudioCodecParam *arg1 = (xedit::AudioCodecParam *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::AudioCodecParam **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nChannels = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioCodecParam_1nChannels_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::AudioCodecParam *arg1 = (xedit::AudioCodecParam *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::AudioCodecParam **)&jarg1; 
  result = (int) ((arg1)->nChannels);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioCodecParam_1reserved_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  xedit::AudioCodecParam *arg1 = (xedit::AudioCodecParam *) 0 ;
  uint8_t *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::AudioCodecParam **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 64) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->reserved;
    for (ii = 0; ii < (size_t)64; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioCodecParam_1reserved_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  xedit::AudioCodecParam *arg1 = (xedit::AudioCodecParam *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::AudioCodecParam **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->reserved);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 64); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1AudioCodecParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::AudioCodecParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::AudioCodecParam *)new xedit::AudioCodecParam();
  *(xedit::AudioCodecParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1AudioCodecParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::AudioCodecParam *arg1 = (xedit::AudioCodecParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::AudioCodecParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_EncodeParam_1eMuxerType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::EncodeParam *arg1 = (xedit::EncodeParam *) 0 ;
  libav::EMuxerType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::EncodeParam **)&jarg1; 
  arg2 = (libav::EMuxerType)jarg2; 
  if (arg1) (arg1)->eMuxerType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_EncodeParam_1eMuxerType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::EncodeParam *arg1 = (xedit::EncodeParam *) 0 ;
  libav::EMuxerType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::EncodeParam **)&jarg1; 
  result = (libav::EMuxerType) ((arg1)->eMuxerType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_EncodeParam_1videoParam_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::EncodeParam *arg1 = (xedit::EncodeParam *) 0 ;
  xedit::VideoCodecParam *arg2 = (xedit::VideoCodecParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::EncodeParam **)&jarg1; 
  arg2 = *(xedit::VideoCodecParam **)&jarg2; 
  if (arg1) (arg1)->videoParam = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_EncodeParam_1videoParam_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::EncodeParam *arg1 = (xedit::EncodeParam *) 0 ;
  xedit::VideoCodecParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::EncodeParam **)&jarg1; 
  result = (xedit::VideoCodecParam *)& ((arg1)->videoParam);
  *(xedit::VideoCodecParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_EncodeParam_1audioParam_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::EncodeParam *arg1 = (xedit::EncodeParam *) 0 ;
  xedit::AudioCodecParam *arg2 = (xedit::AudioCodecParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::EncodeParam **)&jarg1; 
  arg2 = *(xedit::AudioCodecParam **)&jarg2; 
  if (arg1) (arg1)->audioParam = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_EncodeParam_1audioParam_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::EncodeParam *arg1 = (xedit::EncodeParam *) 0 ;
  xedit::AudioCodecParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::EncodeParam **)&jarg1; 
  result = (xedit::AudioCodecParam *)& ((arg1)->audioParam);
  *(xedit::AudioCodecParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_EncodeParam_1reserved_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  xedit::EncodeParam *arg1 = (xedit::EncodeParam *) 0 ;
  uint8_t *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::EncodeParam **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 512) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->reserved;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_com_ds_xedit_jni_xeditJNI_EncodeParam_1reserved_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  xedit::EncodeParam *arg1 = (xedit::EncodeParam *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::EncodeParam **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->reserved);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 512); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1EncodeParam(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::EncodeParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::EncodeParam *)new xedit::EncodeParam();
  *(xedit::EncodeParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1EncodeParam(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::EncodeParam *arg1 = (xedit::EncodeParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::EncodeParam **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_GenerateSetting_1strDestDir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xedit::GenerateSetting *arg1 = (xedit::GenerateSetting *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::GenerateSetting **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->strDestDir, (const char *)arg2, 1024-1);
      arg1->strDestDir[1024-1] = 0;
    } else {
      arg1->strDestDir[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_GenerateSetting_1strDestDir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xedit::GenerateSetting *arg1 = (xedit::GenerateSetting *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::GenerateSetting **)&jarg1; 
  result = (char *)(char *) ((arg1)->strDestDir);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_GenerateSetting_1strDestName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xedit::GenerateSetting *arg1 = (xedit::GenerateSetting *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::GenerateSetting **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->strDestName, (const char *)arg2, 1024-1);
      arg1->strDestName[1024-1] = 0;
    } else {
      arg1->strDestName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_GenerateSetting_1strDestName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xedit::GenerateSetting *arg1 = (xedit::GenerateSetting *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::GenerateSetting **)&jarg1; 
  result = (char *)(char *) ((arg1)->strDestName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_GenerateSetting_1encodeParam_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::GenerateSetting *arg1 = (xedit::GenerateSetting *) 0 ;
  xedit::EncodeParam *arg2 = (xedit::EncodeParam *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::GenerateSetting **)&jarg1; 
  arg2 = *(xedit::EncodeParam **)&jarg2; 
  if (arg1) (arg1)->encodeParam = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_GenerateSetting_1encodeParam_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::GenerateSetting *arg1 = (xedit::GenerateSetting *) 0 ;
  xedit::EncodeParam *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::GenerateSetting **)&jarg1; 
  result = (xedit::EncodeParam *)& ((arg1)->encodeParam);
  *(xedit::EncodeParam **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_GenerateSetting_1rStartTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::GenerateSetting *arg1 = (xedit::GenerateSetting *) 0 ;
  libav::Rational *arg2 = (libav::Rational *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::GenerateSetting **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2; 
  if (arg1) (arg1)->rStartTime = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_GenerateSetting_1rStartTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::GenerateSetting *arg1 = (xedit::GenerateSetting *) 0 ;
  libav::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::GenerateSetting **)&jarg1; 
  result = (libav::Rational *)& ((arg1)->rStartTime);
  *(libav::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_GenerateSetting_1rDuration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::GenerateSetting *arg1 = (xedit::GenerateSetting *) 0 ;
  libav::Rational *arg2 = (libav::Rational *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::GenerateSetting **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2; 
  if (arg1) (arg1)->rDuration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_GenerateSetting_1rDuration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::GenerateSetting *arg1 = (xedit::GenerateSetting *) 0 ;
  libav::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::GenerateSetting **)&jarg1; 
  result = (libav::Rational *)& ((arg1)->rDuration);
  *(libav::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1GenerateSetting(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::GenerateSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::GenerateSetting *)new xedit::GenerateSetting();
  *(xedit::GenerateSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1GenerateSetting(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::GenerateSetting *arg1 = (xedit::GenerateSetting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::GenerateSetting **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IGenerateObserver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IGenerateObserver *arg1 = (xedit::IGenerateObserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IGenerateObserver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IGenerateObserver_1onFinish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  xedit::IGenerateObserver *arg1 = (xedit::IGenerateObserver *) 0 ;
  xedit::GenerateSetting *arg2 = 0 ;
  StatusCode arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::IGenerateObserver **)&jarg1; 
  arg2 = *(xedit::GenerateSetting **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "xedit::GenerateSetting const & reference is null");
    return ;
  } 
  arg3 = (StatusCode)jarg3; 
  (arg1)->onFinish((xedit::GenerateSetting const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IGenerateObserver_1onUpdateProcess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  xedit::IGenerateObserver *arg1 = (xedit::IGenerateObserver *) 0 ;
  xedit::GenerateSetting *arg2 = 0 ;
  libav::Rational arg3 ;
  libav::Rational *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(xedit::IGenerateObserver **)&jarg1; 
  arg2 = *(xedit::GenerateSetting **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "xedit::GenerateSetting const & reference is null");
    return ;
  } 
  argp3 = *(libav::Rational **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libav::Rational");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->onUpdateProcess((xedit::GenerateSetting const &)*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1IGenerateObserver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::IGenerateObserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::IGenerateObserver *)new SwigDirector_IGenerateObserver(jenv);
  *(xedit::IGenerateObserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IGenerateObserver_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  xedit::IGenerateObserver *obj = *((xedit::IGenerateObserver **)&objarg);
  (void)jcls;
  SwigDirector_IGenerateObserver *director = dynamic_cast<SwigDirector_IGenerateObserver *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IGenerateObserver_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  xedit::IGenerateObserver *obj = *((xedit::IGenerateObserver **)&objarg);
  SwigDirector_IGenerateObserver *director = dynamic_cast<SwigDirector_IGenerateObserver *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_PreviewFrame_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xedit::PreviewFrame *arg1 = (xedit::PreviewFrame *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::PreviewFrame **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_PreviewFrame_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xedit::PreviewFrame *arg1 = (xedit::PreviewFrame *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::PreviewFrame **)&jarg1; 
  result = (std::string *) & ((arg1)->path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_PreviewFrame_1rTimeOffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::PreviewFrame *arg1 = (xedit::PreviewFrame *) 0 ;
  libav::Rational *arg2 = (libav::Rational *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::PreviewFrame **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2; 
  if (arg1) (arg1)->rTimeOffset = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_PreviewFrame_1rTimeOffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::PreviewFrame *arg1 = (xedit::PreviewFrame *) 0 ;
  libav::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::PreviewFrame **)&jarg1; 
  result = (libav::Rational *)& ((arg1)->rTimeOffset);
  *(libav::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1PreviewFrame(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::PreviewFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::PreviewFrame *)new xedit::PreviewFrame();
  *(xedit::PreviewFrame **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1PreviewFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::PreviewFrame *arg1 = (xedit::PreviewFrame *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::PreviewFrame **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IPreview(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IPreview *arg1 = (xedit::IPreview *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IPreview **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IPreview_1getPreviewSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IPreview *arg1 = (xedit::IPreview *) 0 ;
  xedit::GSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IPreview **)&jarg1; 
  result = ((xedit::IPreview const *)arg1)->getPreviewSize();
  *(xedit::GSize **)&jresult = new xedit::GSize((const xedit::GSize &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IPreview_1getPreviewFrameCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::IPreview *arg1 = (xedit::IPreview *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IPreview **)&jarg1; 
  result = (int)((xedit::IPreview const *)arg1)->getPreviewFrameCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IPreview_1getPreviewFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  xedit::IPreview *arg1 = (xedit::IPreview *) 0 ;
  int arg2 ;
  xedit::PreviewFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IPreview **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (xedit::PreviewFrame *)((xedit::IPreview const *)arg1)->getPreviewFrame(arg2);
  *(xedit::PreviewFrame **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IPreview_1getPreviewFrameNearBy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  xedit::IPreview *arg1 = (xedit::IPreview *) 0 ;
  libav::Rational arg2 ;
  libav::Rational *argp2 ;
  xedit::PreviewFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::IPreview **)&jarg1; 
  argp2 = *(libav::Rational **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libav::Rational");
    return 0;
  }
  arg2 = *argp2; 
  result = (xedit::PreviewFrame *)((xedit::IPreview const *)arg1)->getPreviewFrameNearBy(arg2);
  *(xedit::PreviewFrame **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IClip(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IClip *arg1 = (xedit::IClip *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IClip **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IClip_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IClip *arg1 = (xedit::IClip *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IClip **)&jarg1; 
  result = (int64_t)((xedit::IClip const *)arg1)->getId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IClip_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::IClip *arg1 = (xedit::IClip *) 0 ;
  xedit::EClipType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IClip **)&jarg1; 
  result = (xedit::EClipType)((xedit::IClip const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IClip_1getRefMediaId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IClip *arg1 = (xedit::IClip *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IClip **)&jarg1; 
  result = (int64_t)((xedit::IClip const *)arg1)->getRefMediaId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IClip_1getOffsetOnTrack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IClip *arg1 = (xedit::IClip *) 0 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IClip **)&jarg1; 
  result = ((xedit::IClip const *)arg1)->getOffsetOnTrack();
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IClip_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IClip *arg1 = (xedit::IClip *) 0 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IClip **)&jarg1; 
  result = ((xedit::IClip const *)arg1)->getDuration();
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IClip_1getOffsetInMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IClip *arg1 = (xedit::IClip *) 0 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IClip **)&jarg1; 
  result = ((xedit::IClip const *)arg1)->getOffsetInMedia();
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IClip_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  xedit::IClip *obj = *((xedit::IClip **)&objarg);
  (void)jcls;
  SwigDirector_IClip *director = dynamic_cast<SwigDirector_IClip *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IClip_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  xedit::IClip *obj = *((xedit::IClip **)&objarg);
  SwigDirector_IClip *director = dynamic_cast<SwigDirector_IClip *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IAVClip(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IAVClip *arg1 = (xedit::IAVClip *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IAVClip **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVClip_1getStreamIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::IAVClip *arg1 = (xedit::IAVClip *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IAVClip **)&jarg1; 
  result = (int)((xedit::IAVClip const *)arg1)->getStreamIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVClip_1dynamic_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IClip *arg1 = (xedit::IClip *) 0 ;
  xedit::IAVClip *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IClip **)&jarg1; 
  {
    result = (xedit::IAVClip *)xedit_IAVClip_dynamic_cast(arg1);
    if (!result) {
      jclass excep = jenv->FindClass("java/lang/ClassCastException");
      if (excep) {
        jenv->ThrowNew(excep, "dynamic_cast exception");
      }
    }
  }
  *(xedit::IAVClip **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IImageClip(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IImageClip *arg1 = (xedit::IImageClip *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IImageClip **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1ISVGClip(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::ISVGClip *arg1 = (xedit::ISVGClip *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::ISVGClip **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IMedia(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IMedia *arg1 = (xedit::IMedia *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IMedia **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IMedia_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IMedia *arg1 = (xedit::IMedia *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IMedia **)&jarg1; 
  result = (int64_t)((xedit::IMedia const *)arg1)->getId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_IMedia_1getPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xedit::IMedia *arg1 = (xedit::IMedia *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IMedia **)&jarg1; 
  result = (char *)((xedit::IMedia const *)arg1)->getPath();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IMedia_1getMediaType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::IMedia *arg1 = (xedit::IMedia *) 0 ;
  xedit::EMediaType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IMedia **)&jarg1; 
  result = (xedit::EMediaType)((xedit::IMedia const *)arg1)->getMediaType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IMedia_1newClip_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IMedia *arg1 = (xedit::IMedia *) 0 ;
  xedit::IClip *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IMedia **)&jarg1; 
  result = (xedit::IClip *)((xedit::IMedia const *)arg1)->newClip();
  *(xedit::IClip **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IMedia_1newClip_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  xedit::IMedia *arg1 = (xedit::IMedia *) 0 ;
  libav::Rational arg2 ;
  libav::Rational *argp2 ;
  xedit::IClip *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::IMedia **)&jarg1; 
  argp2 = *(libav::Rational **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libav::Rational");
    return 0;
  }
  arg2 = *argp2; 
  result = (xedit::IClip *)((xedit::IMedia const *)arg1)->newClip(arg2);
  *(xedit::IClip **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IMedia_1getPreview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IMedia *arg1 = (xedit::IMedia *) 0 ;
  xedit::IPreview *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IMedia **)&jarg1; 
  result = (xedit::IPreview *)((xedit::IMedia const *)arg1)->getPreview();
  *(xedit::IPreview **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1IMedia(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::IMedia *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::IMedia *)new SwigDirector_IMedia(jenv);
  *(xedit::IMedia **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IMedia_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  xedit::IMedia *obj = *((xedit::IMedia **)&objarg);
  (void)jcls;
  SwigDirector_IMedia *director = dynamic_cast<SwigDirector_IMedia *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IMedia_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  xedit::IMedia *obj = *((xedit::IMedia **)&objarg);
  SwigDirector_IMedia *director = dynamic_cast<SwigDirector_IMedia *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IAVMedia(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IAVMedia *arg1 = (xedit::IAVMedia *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IAVMedia **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVMedia_1getMediaInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::IAVMedia *arg1 = (xedit::IAVMedia *) 0 ;
  libav::AVMediaInfo *arg2 = (libav::AVMediaInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::IAVMedia **)&jarg1; 
  arg2 = *(libav::AVMediaInfo **)&jarg2; 
  ((xedit::IAVMedia const *)arg1)->getMediaInfo(arg2);
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVMedia_1openPreviewSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::IAVMedia *arg1 = (xedit::IAVMedia *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IAVMedia **)&jarg1; 
  result = (StatusCode)(arg1)->openPreviewSession();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVMedia_1createPreviewFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  xedit::IAVMedia *arg1 = (xedit::IAVMedia *) 0 ;
  int arg2 ;
  libav::Rational arg3 ;
  libav::Rational *argp3 ;
  xedit::PreviewFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(xedit::IAVMedia **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(libav::Rational **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libav::Rational");
    return 0;
  }
  arg3 = *argp3; 
  result = (xedit::PreviewFrame *)(arg1)->createPreviewFrame(arg2,arg3);
  *(xedit::PreviewFrame **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVMedia_1closePreviewSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  xedit::IAVMedia *arg1 = (xedit::IAVMedia *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IAVMedia **)&jarg1; 
  (arg1)->closePreviewSession();
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVMedia_1getPreview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  xedit::IAVMedia *arg1 = (xedit::IAVMedia *) 0 ;
  int arg2 ;
  xedit::IPreview *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IAVMedia **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (xedit::IPreview *)((xedit::IAVMedia const *)arg1)->getPreview(arg2);
  *(xedit::IPreview **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVMedia_1newClip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  xedit::IAVMedia *arg1 = (xedit::IAVMedia *) 0 ;
  int arg2 ;
  xedit::IClip *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IAVMedia **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (xedit::IClip *)((xedit::IAVMedia const *)arg1)->newClip(arg2);
  *(xedit::IClip **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVMedia_1dynamic_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IMedia *arg1 = (xedit::IMedia *) 0 ;
  xedit::IAVMedia *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IMedia **)&jarg1; 
  {
    result = (xedit::IAVMedia *)xedit_IAVMedia_dynamic_cast(arg1);
    if (!result) {
      jclass excep = jenv->FindClass("java/lang/ClassCastException");
      if (excep) {
        jenv->ThrowNew(excep, "dynamic_cast exception");
      }
    }
  }
  *(xedit::IAVMedia **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IImageMedia(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IImageMedia *arg1 = (xedit::IImageMedia *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IImageMedia **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IImageMedia_1getImageType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::IImageMedia *arg1 = (xedit::IImageMedia *) 0 ;
  xedit::EImageType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IImageMedia **)&jarg1; 
  result = (xedit::EImageType)((xedit::IImageMedia const *)arg1)->getImageType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IImageMedia_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IImageMedia *arg1 = (xedit::IImageMedia *) 0 ;
  xedit::GSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IImageMedia **)&jarg1; 
  result = ((xedit::IImageMedia const *)arg1)->getSize();
  *(xedit::GSize **)&jresult = new xedit::GSize((const xedit::GSize &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1ISVGMedia(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::ISVGMedia *arg1 = (xedit::ISVGMedia *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::ISVGMedia **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_ISVGMedia_1getSvg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xedit::ISVGMedia *arg1 = (xedit::ISVGMedia *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ISVGMedia **)&jarg1; 
  result = (char *)((xedit::ISVGMedia const *)arg1)->getSvg();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1ITrackClipInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::ITrackClipInfo *arg1 = (xedit::ITrackClipInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::ITrackClipInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrackClipInfo_1getRefClipId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::ITrackClipInfo *arg1 = (xedit::ITrackClipInfo *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITrackClipInfo **)&jarg1; 
  result = (int64_t)((xedit::ITrackClipInfo const *)arg1)->getRefClipId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrackClipInfo_1getOffsetOnTrack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::ITrackClipInfo *arg1 = (xedit::ITrackClipInfo *) 0 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITrackClipInfo **)&jarg1; 
  result = ((xedit::ITrackClipInfo const *)arg1)->getOffsetOnTrack();
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1ITrack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::ITrack **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrack_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITrack **)&jarg1; 
  result = (int64_t)((xedit::ITrack const *)arg1)->getId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrack_1getTrackType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  xedit::ETrackType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITrack **)&jarg1; 
  result = (xedit::ETrackType)((xedit::ITrack const *)arg1)->getTrackType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrack_1isDisabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITrack **)&jarg1; 
  result = (bool)((xedit::ITrack const *)arg1)->isDisabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrack_1getClipCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITrack **)&jarg1; 
  result = (int)((xedit::ITrack const *)arg1)->getClipCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrack_1getClip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  int arg2 ;
  xedit::IClip *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITrack **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (xedit::IClip *)((xedit::ITrack const *)arg1)->getClip(arg2);
  *(xedit::IClip **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrack_1getClipById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  int64_t arg2 ;
  xedit::IClip *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITrack **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (xedit::IClip *)((xedit::ITrack const *)arg1)->getClipById(arg2);
  *(xedit::IClip **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrack_1getClipByOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  libav::Rational arg2 ;
  libav::Rational *argp2 ;
  xedit::IClip *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::ITrack **)&jarg1; 
  argp2 = *(libav::Rational **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libav::Rational");
    return 0;
  }
  arg2 = *argp2; 
  result = (xedit::IClip *)((xedit::ITrack const *)arg1)->getClipByOffset(arg2);
  *(xedit::IClip **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrack_1findClip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  libav::Rational arg2 ;
  libav::Rational *argp2 ;
  xedit::IClip *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::ITrack **)&jarg1; 
  argp2 = *(libav::Rational **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libav::Rational");
    return 0;
  }
  arg2 = *argp2; 
  result = (xedit::IClip *)((xedit::ITrack const *)arg1)->findClip(arg2);
  *(xedit::IClip **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrack_1hasClipOnOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  libav::Rational arg2 ;
  libav::Rational *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::ITrack **)&jarg1; 
  argp2 = *(libav::Rational **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libav::Rational");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((xedit::ITrack const *)arg1)->hasClipOnOffset(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrack_1addClip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  int64_t arg2 ;
  libav::Rational arg3 ;
  libav::Rational *argp3 ;
  xedit::IClip *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(xedit::ITrack **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  argp3 = *(libav::Rational **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libav::Rational");
    return 0;
  }
  arg3 = *argp3; 
  result = (xedit::IClip *)(arg1)->addClip(arg2,arg3);
  *(xedit::IClip **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrack_1splitClip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jobject jarg4, jobject jarg5) {
  jint jresult = 0 ;
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  int64_t arg2 ;
  libav::Rational arg3 ;
  xedit::IClip **arg4 = (xedit::IClip **) 0 ;
  xedit::IClip **arg5 = (xedit::IClip **) 0 ;
  libav::Rational *argp3 ;
  xedit::IClip *ppObject4 = 0 ;
  xedit::IClip *ppObject5 = 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(xedit::ITrack **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  argp3 = *(libav::Rational **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libav::Rational");
    return 0;
  }
  arg3 = *argp3; 
  
  arg4 = &ppObject4;
  
  
  arg5 = &ppObject5;
  
  result = (StatusCode)(arg1)->splitClip(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = jenv->FindClass("com/ds/xedit/jni/IClip");
    jfieldID fid = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(xedit::IClip **)&cPtr = *arg4;
    jenv->SetLongField(jarg4, fid, cPtr);
  }
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = jenv->FindClass("com/ds/xedit/jni/IClip");
    jfieldID fid = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(xedit::IClip **)&cPtr = *arg5;
    jenv->SetLongField(jarg5, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrack_1moveClip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg5, jobject jarg6) {
  jint jresult = 0 ;
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  int64_t arg2 ;
  libav::Rational arg3 ;
  int64_t *arg4 = (int64_t *) 0 ;
  xedit::IClip **arg5 = (xedit::IClip **) 0 ;
  xedit::IClip **arg6 = (xedit::IClip **) 0 ;
  libav::Rational *argp3 ;
  xedit::IClip *ppObject5 = 0 ;
  xedit::IClip *ppObject6 = 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(xedit::ITrack **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  argp3 = *(libav::Rational **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libav::Rational");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(int64_t **)&jarg4; 
  
  arg5 = &ppObject5;
  
  
  arg6 = &ppObject6;
  
  result = (StatusCode)(arg1)->moveClip(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = jenv->FindClass("com/ds/xedit/jni/IClip");
    jfieldID fid = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(xedit::IClip **)&cPtr = *arg5;
    jenv->SetLongField(jarg5, fid, cPtr);
  }
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = jenv->FindClass("com/ds/xedit/jni/IClip");
    jfieldID fid = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(xedit::IClip **)&cPtr = *arg6;
    jenv->SetLongField(jarg6, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrack_1changeClipDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  int64_t arg2 ;
  libav::Rational *arg3 = 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(xedit::ITrack **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = *(libav::Rational **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libav::Rational const & reference is null");
    return 0;
  } 
  result = (StatusCode)(arg1)->changeClipDuration(arg2,(libav::Rational const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrack_1changeClipOffsetInMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  int64_t arg2 ;
  libav::Rational *arg3 = 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(xedit::ITrack **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = *(libav::Rational **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libav::Rational const & reference is null");
    return 0;
  } 
  result = (StatusCode)(arg1)->changeClipOffsetInMedia(arg2,(libav::Rational const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrack_1removeClip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  int arg2 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITrack **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (StatusCode)(arg1)->removeClip(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrack_1removeClipById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  int64_t arg2 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITrack **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (StatusCode)(arg1)->removeClipById(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITrack_1removeAllClips(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  xedit::ITrack *arg1 = (xedit::ITrack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITrack **)&jarg1; 
  (arg1)->removeAllClips();
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1eSampleFormat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  libav::ESampleFormat arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  arg2 = (libav::ESampleFormat)jarg2; 
  if (arg1) (arg1)->eSampleFormat = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1eSampleFormat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  libav::ESampleFormat result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  result = (libav::ESampleFormat) ((arg1)->eSampleFormat);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1nBitsPerSample_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nBitsPerSample = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1nBitsPerSample_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  result = (int) ((arg1)->nBitsPerSample);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1nSampleRate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nSampleRate = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1nSampleRate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  result = (int) ((arg1)->nSampleRate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1nChannelCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nChannelCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1nChannelCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  result = (int) ((arg1)->nChannelCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1nChannelLayout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nChannelLayout = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1nChannelLayout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  result = (int) ((arg1)->nChannelLayout);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1nWidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nWidth = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1nWidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  result = (int) ((arg1)->nWidth);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1nHeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nHeight = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1nHeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  result = (int) ((arg1)->nHeight);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1rAspectRatio_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  libav::Rational *arg2 = (libav::Rational *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2; 
  if (arg1) (arg1)->rAspectRatio = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1rAspectRatio_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  libav::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  result = (libav::Rational *)& ((arg1)->rAspectRatio);
  *(libav::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1bInterlaced_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bInterlaced = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1bInterlaced_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  result = (bool) ((arg1)->bInterlaced);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1bTopFieldFirst_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bTopFieldFirst = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1bTopFieldFirst_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  result = (bool) ((arg1)->bTopFieldFirst);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1ePixFormat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  libav::EPixFormat arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  arg2 = (libav::EPixFormat)jarg2; 
  if (arg1) (arg1)->ePixFormat = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1ePixFormat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  libav::EPixFormat result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  result = (libav::EPixFormat) ((arg1)->ePixFormat);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1rFrameRate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  libav::Rational *arg2 = (libav::Rational *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  arg2 = *(libav::Rational **)&jarg2; 
  if (arg1) (arg1)->rFrameRate = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ProjectSetting_1rFrameRate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  libav::Rational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  result = (libav::Rational *)& ((arg1)->rFrameRate);
  *(libav::Rational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1ProjectSetting(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::ProjectSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::ProjectSetting *)new xedit::ProjectSetting();
  *(xedit::ProjectSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1ProjectSetting(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::ProjectSetting *arg1 = (xedit::ProjectSetting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::ProjectSetting **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IProject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IProject *arg1 = (xedit::IProject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IProject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IProject_1getVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::IProject *arg1 = (xedit::IProject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IProject **)&jarg1; 
  result = (int)((xedit::IProject const *)arg1)->getVersion();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IProject_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IProject *arg1 = (xedit::IProject *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IProject **)&jarg1; 
  result = (int64_t)((xedit::IProject const *)arg1)->getId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_IProject_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xedit::IProject *arg1 = (xedit::IProject *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IProject **)&jarg1; 
  result = (char *)((xedit::IProject const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IProject_1getSetting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IProject *arg1 = (xedit::IProject *) 0 ;
  xedit::ProjectSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IProject **)&jarg1; 
  result = (xedit::ProjectSetting *) &((xedit::IProject const *)arg1)->getSetting();
  *(xedit::ProjectSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IAction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IAction *arg1 = (xedit::IAction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IAction **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IAction_1getActionType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::IAction *arg1 = (xedit::IAction *) 0 ;
  xedit::EActionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IAction **)&jarg1; 
  result = (xedit::EActionType)((xedit::IAction const *)arg1)->getActionType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_IAction_1getActionParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  xedit::IAction *arg1 = (xedit::IAction *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IAction **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)((xedit::IAction const *)arg1)->getActionParam((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1ITimeLineObserver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::ITimeLineObserver *arg1 = (xedit::ITimeLineObserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::ITimeLineObserver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLineObserver_1onPosDidChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::ITimeLineObserver *arg1 = (xedit::ITimeLineObserver *) 0 ;
  libav::Rational arg2 ;
  libav::Rational *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::ITimeLineObserver **)&jarg1; 
  argp2 = *(libav::Rational **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libav::Rational");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->onPosDidChanged(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLineObserver_1onTrackCreated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::ITimeLineObserver *arg1 = (xedit::ITimeLineObserver *) 0 ;
  xedit::ITrack *arg2 = (xedit::ITrack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::ITimeLineObserver **)&jarg1; 
  arg2 = *(xedit::ITrack **)&jarg2; 
  (arg1)->onTrackCreated(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLineObserver_1onTrackRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  xedit::ITimeLineObserver *arg1 = (xedit::ITimeLineObserver *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLineObserver **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  (arg1)->onTrackRemoved(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLineObserver_1onTimeLineStatusChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::ITimeLineObserver *arg1 = (xedit::ITimeLineObserver *) 0 ;
  xedit::ETimeLineStatus arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLineObserver **)&jarg1; 
  arg2 = (xedit::ETimeLineStatus)jarg2; 
  (arg1)->onTimeLineStatusChanged(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1ITimeLineObserver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::ITimeLineObserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::ITimeLineObserver *)new SwigDirector_ITimeLineObserver(jenv);
  *(xedit::ITimeLineObserver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLineObserver_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  xedit::ITimeLineObserver *obj = *((xedit::ITimeLineObserver **)&objarg);
  (void)jcls;
  SwigDirector_ITimeLineObserver *director = dynamic_cast<SwigDirector_ITimeLineObserver *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLineObserver_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  xedit::ITimeLineObserver *obj = *((xedit::ITimeLineObserver **)&objarg);
  SwigDirector_ITimeLineObserver *director = dynamic_cast<SwigDirector_ITimeLineObserver *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1ITimeLine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1getEngine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  xedit::IXEngine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  result = (xedit::IXEngine *)((xedit::ITimeLine const *)arg1)->getEngine();
  *(xedit::IXEngine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1getLastErrorCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  result = (StatusCode)((xedit::ITimeLine const *)arg1)->getLastErrorCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1getLastErrorMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  result = (char *)((xedit::ITimeLine const *)arg1)->getLastErrorMessage();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1canRedo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  result = (bool)(arg1)->canRedo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1canUndo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  result = (bool)(arg1)->canUndo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1redo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  xedit::IAction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  result = (xedit::IAction *)(arg1)->redo();
  *(xedit::IAction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1undo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  xedit::IAction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  result = (xedit::IAction *)(arg1)->undo();
  *(xedit::IAction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1getCurrentPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  result = ((xedit::ITimeLine const *)arg1)->getCurrentPos();
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  libav::Rational result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  result = ((xedit::ITimeLine const *)arg1)->getDuration();
  *(libav::Rational **)&jresult = new libav::Rational((const libav::Rational &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1getMediaCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  result = (int)((xedit::ITimeLine const *)arg1)->getMediaCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1getMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  int arg2 ;
  xedit::IMedia *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (xedit::IMedia *)((xedit::ITimeLine const *)arg1)->getMedia(arg2);
  *(xedit::IMedia **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1getMediaById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  int64_t arg2 ;
  xedit::IMedia *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (xedit::IMedia *)((xedit::ITimeLine const *)arg1)->getMediaById(arg2);
  *(xedit::IMedia **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1addMedia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  char *arg2 = (char *) 0 ;
  xedit::IMedia *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (xedit::IMedia *)(arg1)->addMedia((char const *)arg2);
  *(xedit::IMedia **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1getTrackCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  xedit::ETrackType arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = (xedit::ETrackType)jarg2; 
  result = (int)((xedit::ITimeLine const *)arg1)->getTrackCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1getTrack_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  xedit::ETrackType arg2 ;
  int arg3 ;
  xedit::ITrack *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = (xedit::ETrackType)jarg2; 
  arg3 = (int)jarg3; 
  result = (xedit::ITrack *)((xedit::ITimeLine const *)arg1)->getTrack(arg2,arg3);
  *(xedit::ITrack **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1getTrack_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  int64_t arg2 ;
  xedit::ITrack *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (xedit::ITrack *)((xedit::ITimeLine const *)arg1)->getTrack(arg2);
  *(xedit::ITrack **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1newTrack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  xedit::ETrackType arg2 ;
  xedit::ITrack *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = (xedit::ETrackType)jarg2; 
  result = (xedit::ITrack *)(arg1)->newTrack(arg2);
  *(xedit::ITrack **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1removeTrack_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  (arg1)->removeTrack(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1removeTrack_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  xedit::ITrack *arg2 = (xedit::ITrack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = *(xedit::ITrack **)&jarg2; 
  (arg1)->removeTrack(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1findClip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  int64_t arg2 ;
  xedit::IClip *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (xedit::IClip *)((xedit::ITimeLine const *)arg1)->findClip(arg2);
  *(xedit::IClip **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1seek(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  libav::Rational arg2 ;
  libav::Rational *argp2 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  argp2 = *(libav::Rational **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libav::Rational");
    return 0;
  }
  arg2 = *argp2; 
  result = (StatusCode)(arg1)->seek(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1play(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  (arg1)->play();
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1pause(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  (arg1)->pause();
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1addObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  xedit::ITimeLineObserver *arg2 = (xedit::ITimeLineObserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = *(xedit::ITimeLineObserver **)&jarg2; 
  (arg1)->addObserver(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1removeObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  xedit::ITimeLineObserver *arg2 = (xedit::ITimeLineObserver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = *(xedit::ITimeLineObserver **)&jarg2; 
  (arg1)->removeObserver(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1removeAllObservers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  (arg1)->removeAllObservers();
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1getRendererCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  result = (int)((xedit::ITimeLine const *)arg1)->getRendererCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1getRenderer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  int arg2 ;
  xedit::IRenderer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (xedit::IRenderer *)((xedit::ITimeLine const *)arg1)->getRenderer(arg2);
  *(xedit::IRenderer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1addRenderer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  xedit::IRenderer *arg2 = (xedit::IRenderer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = *(xedit::IRenderer **)&jarg2; 
  (arg1)->addRenderer(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1removeRenderer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->removeRenderer(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1removeRenderer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  xedit::IRenderer *arg2 = (xedit::IRenderer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = *(xedit::IRenderer **)&jarg2; 
  (arg1)->removeRenderer(arg2);
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1removeAllRenderers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  (arg1)->removeAllRenderers();
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1generate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  xedit::GenerateSetting *arg2 = 0 ;
  xedit::IGenerateObserver *arg3 = (xedit::IGenerateObserver *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = *(xedit::GenerateSetting **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "xedit::GenerateSetting const & reference is null");
    return 0;
  } 
  arg3 = *(xedit::IGenerateObserver **)&jarg3; 
  result = (StatusCode)(arg1)->generate((xedit::GenerateSetting const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1generate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  xedit::GenerateSetting *arg2 = 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  arg2 = *(xedit::GenerateSetting **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "xedit::GenerateSetting const & reference is null");
    return 0;
  } 
  result = (StatusCode)(arg1)->generate((xedit::GenerateSetting const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1cancelGenerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  (arg1)->cancelGenerate();
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_ITimeLine_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  xedit::ITimeLine *arg1 = (xedit::ITimeLine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::ITimeLine **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_EngineSetting_1cacheDir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xedit::EngineSetting *arg1 = (xedit::EngineSetting *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::EngineSetting **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->cacheDir, (const char *)arg2, 1024-1);
      arg1->cacheDir[1024-1] = 0;
    } else {
      arg1->cacheDir[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_EngineSetting_1cacheDir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xedit::EngineSetting *arg1 = (xedit::EngineSetting *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::EngineSetting **)&jarg1; 
  result = (char *)(char *) ((arg1)->cacheDir);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_EngineSetting_1logDir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xedit::EngineSetting *arg1 = (xedit::EngineSetting *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::EngineSetting **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->logDir, (const char *)arg2, 1024-1);
      arg1->logDir[1024-1] = 0;
    } else {
      arg1->logDir[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ds_xedit_jni_xeditJNI_EngineSetting_1logDir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xedit::EngineSetting *arg1 = (xedit::EngineSetting *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::EngineSetting **)&jarg1; 
  result = (char *)(char *) ((arg1)->logDir);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_EngineSetting_1previewFrameSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xedit::EngineSetting *arg1 = (xedit::EngineSetting *) 0 ;
  xedit::GSize *arg2 = (xedit::GSize *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::EngineSetting **)&jarg1; 
  arg2 = *(xedit::GSize **)&jarg2; 
  if (arg1) (arg1)->previewFrameSize = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_EngineSetting_1previewFrameSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::EngineSetting *arg1 = (xedit::EngineSetting *) 0 ;
  xedit::GSize *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::EngineSetting **)&jarg1; 
  result = (xedit::GSize *)& ((arg1)->previewFrameSize);
  *(xedit::GSize **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_EngineSetting_1useGpuToDecode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  xedit::EngineSetting *arg1 = (xedit::EngineSetting *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::EngineSetting **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useGpuToDecode = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_EngineSetting_1useGpuToDecode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xedit::EngineSetting *arg1 = (xedit::EngineSetting *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::EngineSetting **)&jarg1; 
  result = (bool) ((arg1)->useGpuToDecode);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_new_1EngineSetting(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::EngineSetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::EngineSetting *)new xedit::EngineSetting();
  *(xedit::EngineSetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1EngineSetting(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::EngineSetting *arg1 = (xedit::EngineSetting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::EngineSetting **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_delete_1IXEngine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xedit::IXEngine *arg1 = (xedit::IXEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xedit::IXEngine **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IXEngine_1getSharedInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xedit::IXEngine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xedit::IXEngine *)xedit::IXEngine::getSharedInstance();
  *(xedit::IXEngine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IXEngine_1destroySharedInstance(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  xedit::IXEngine::destroySharedInstance();
}


SWIGEXPORT jboolean JNICALL Java_com_ds_xedit_jni_xeditJNI_IXEngine_1checkIfGpuFasterThanCpu(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)xedit::IXEngine::checkIfGpuFasterThanCpu((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IXEngine_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  xedit::IXEngine *arg1 = (xedit::IXEngine *) 0 ;
  xedit::EngineSetting *arg2 = 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::IXEngine **)&jarg1; 
  arg2 = *(xedit::EngineSetting **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "xedit::EngineSetting const & reference is null");
    return 0;
  } 
  result = (StatusCode)(arg1)->initialize((xedit::EngineSetting const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IXEngine_1getEngineSetting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IXEngine *arg1 = (xedit::IXEngine *) 0 ;
  xedit::EngineSetting result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IXEngine **)&jarg1; 
  result = ((xedit::IXEngine const *)arg1)->getEngineSetting();
  *(xedit::EngineSetting **)&jresult = new xedit::EngineSetting((const xedit::EngineSetting &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IXEngine_1newProject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jint jresult = 0 ;
  xedit::IXEngine *arg1 = (xedit::IXEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  xedit::ProjectSetting *arg3 = 0 ;
  int arg4 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(xedit::IXEngine **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(xedit::ProjectSetting **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "xedit::ProjectSetting const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = (StatusCode)(arg1)->newProject((char const *)arg2,(xedit::ProjectSetting const &)*arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IXEngine_1newProject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  xedit::IXEngine *arg1 = (xedit::IXEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  xedit::ProjectSetting *arg3 = 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(xedit::IXEngine **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(xedit::ProjectSetting **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "xedit::ProjectSetting const & reference is null");
    return 0;
  } 
  result = (StatusCode)(arg1)->newProject((char const *)arg2,(xedit::ProjectSetting const &)*arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IXEngine_1getCurrentProject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IXEngine *arg1 = (xedit::IXEngine *) 0 ;
  xedit::IProject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IXEngine **)&jarg1; 
  result = (xedit::IProject *)((xedit::IXEngine const *)arg1)->getCurrentProject();
  *(xedit::IProject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IXEngine_1openProject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  xedit::IXEngine *arg1 = (xedit::IXEngine *) 0 ;
  xedit::IInputStream *arg2 = (xedit::IInputStream *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::IXEngine **)&jarg1; 
  arg2 = *(xedit::IInputStream **)&jarg2; 
  result = (StatusCode)(arg1)->openProject(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IXEngine_1saveProject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  xedit::IXEngine *arg1 = (xedit::IXEngine *) 0 ;
  xedit::IOutputStream *arg2 = (xedit::IOutputStream *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xedit::IXEngine **)&jarg1; 
  arg2 = *(xedit::IOutputStream **)&jarg2; 
  result = (StatusCode)(arg1)->saveProject(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ds_xedit_jni_xeditJNI_IXEngine_1closeCurrentProject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xedit::IXEngine *arg1 = (xedit::IXEngine *) 0 ;
  StatusCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IXEngine **)&jarg1; 
  result = (StatusCode)(arg1)->closeCurrentProject();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IXEngine_1getTimeLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xedit::IXEngine *arg1 = (xedit::IXEngine *) 0 ;
  xedit::ITimeLine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IXEngine **)&jarg1; 
  result = (xedit::ITimeLine *)((xedit::IXEngine const *)arg1)->getTimeLine();
  *(xedit::ITimeLine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IXEngine_1clearCaches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  xedit::IXEngine *arg1 = (xedit::IXEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IXEngine **)&jarg1; 
  (arg1)->clearCaches();
}


SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_IXEngine_1clearLogs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  xedit::IXEngine *arg1 = (xedit::IXEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xedit::IXEngine **)&jarg1; 
  (arg1)->clearLogs();
}


SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioStream_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libav::BaseAVStream **)&baseptr = *(libav::AudioStream **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoStream_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libav::BaseAVStream **)&baseptr = *(libav::VideoStream **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_CThread_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libav::IThread **)&baseptr = *(libav::CThread **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IVFrame_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libav::IFrame **)&baseptr = *(libav::IVFrame **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IAFrame_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libav::IFrame **)&baseptr = *(libav::IAFrame **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_InputStream_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libav::IStream **)&baseptr = *(libav::InputStream **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacketStreamBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libav::IStream **)&baseptr = *(libav::IItemStream< libav::IPacket > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IPictureStreamBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libav::IStream **)&baseptr = *(libav::IItemStream< libav::IPicture > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IFrameStreamBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libav::IStream **)&baseptr = *(libav::IItemStream< libav::IFrame > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IPacketStream_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libav::IItemStream< libav::IPacket > **)&baseptr = *(libav::IPacketStream **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IFrameStream_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libav::IItemStream< libav::IFrame > **)&baseptr = *(libav::IFrameStream **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IPictureStream_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libav::IItemStream< libav::IPicture > **)&baseptr = *(libav::IPictureStream **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IVideoBuffer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(xedit::IBuffer **)&baseptr = *(xedit::IVideoBuffer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IVideoRenderer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(xedit::IRenderer **)&baseptr = *(xedit::IVideoRenderer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IAudioRenderer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(xedit::IRenderer **)&baseptr = *(xedit::IAudioRenderer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_CInputStream_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(xedit::IInputStream **)&baseptr = *(xedit::CInputStream **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_COutputFileStream_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(xedit::IOutputStream **)&baseptr = *(xedit::COutputFileStream **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_VideoCodecParam_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(xedit::CodecParam **)&baseptr = *(xedit::VideoCodecParam **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_AudioCodecParam_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(xedit::CodecParam **)&baseptr = *(xedit::AudioCodecParam **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVClip_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(xedit::IClip **)&baseptr = *(xedit::IAVClip **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IImageClip_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(xedit::IClip **)&baseptr = *(xedit::IImageClip **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ISVGClip_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(xedit::IClip **)&baseptr = *(xedit::ISVGClip **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IAVMedia_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(xedit::IMedia **)&baseptr = *(xedit::IAVMedia **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_IImageMedia_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(xedit::IMedia **)&baseptr = *(xedit::IImageMedia **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ds_xedit_jni_xeditJNI_ISVGMedia_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(xedit::IMedia **)&baseptr = *(xedit::ISVGMedia **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_ds_xedit_jni_xeditJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[48] = {
    {
      "SwigDirector_ILogReceiver_Receive", "(Lcom/ds/xedit/jni/ILogReceiver;ILjava/lang/String;)V" 
    },
    {
      "SwigDirector_IBuffer_getType", "(Lcom/ds/xedit/jni/IBuffer;)I" 
    },
    {
      "SwigDirector_IVideoBuffer_getType", "(Lcom/ds/xedit/jni/IVideoBuffer;)I" 
    },
    {
      "SwigDirector_IVideoBuffer_getVideoRect", "(Lcom/ds/xedit/jni/IVideoBuffer;)J" 
    },
    {
      "SwigDirector_IVideoBuffer_getPixelFormat", "(Lcom/ds/xedit/jni/IVideoBuffer;)I" 
    },
    {
      "SwigDirector_IVideoBuffer_getLocation", "(Lcom/ds/xedit/jni/IVideoBuffer;)I" 
    },
    {
      "SwigDirector_IVideoBuffer_getPlaneCount", "(Lcom/ds/xedit/jni/IVideoBuffer;)I" 
    },
    {
      "SwigDirector_IVideoBuffer_getPlanePointer", "(Lcom/ds/xedit/jni/IVideoBuffer;I)J" 
    },
    {
      "SwigDirector_IVideoBuffer_getPlaneLineSize", "(Lcom/ds/xedit/jni/IVideoBuffer;I)I" 
    },
    {
      "SwigDirector_IVideoBuffer_getSize", "(Lcom/ds/xedit/jni/IVideoBuffer;I)I" 
    },
    {
      "SwigDirector_IRenderer_render", "(Lcom/ds/xedit/jni/IRenderer;J)I" 
    },
    {
      "SwigDirector_IVideoRenderer_render", "(Lcom/ds/xedit/jni/IVideoRenderer;J)I" 
    },
    {
      "SwigDirector_IVideoRenderer_init", "(Lcom/ds/xedit/jni/IVideoRenderer;III)I" 
    },
    {
      "SwigDirector_IAudioRenderer_render", "(Lcom/ds/xedit/jni/IAudioRenderer;J)I" 
    },
    {
      "SwigDirector_IAudioRenderer_init", "(Lcom/ds/xedit/jni/IAudioRenderer;IIII)I" 
    },
    {
      "SwigDirector_IInputStream_read", "(Lcom/ds/xedit/jni/IInputStream;JI)I" 
    },
    {
      "SwigDirector_IInputStream_seek", "(Lcom/ds/xedit/jni/IInputStream;J)J" 
    },
    {
      "SwigDirector_IInputStream_available", "(Lcom/ds/xedit/jni/IInputStream;)J" 
    },
    {
      "SwigDirector_IInputStream_skip", "(Lcom/ds/xedit/jni/IInputStream;J)J" 
    },
    {
      "SwigDirector_IInputStream_close", "(Lcom/ds/xedit/jni/IInputStream;)I" 
    },
    {
      "SwigDirector_IObservable_addObserver", "(Lcom/ds/xedit/jni/IObservable;J)V" 
    },
    {
      "SwigDirector_IObservable_deleteObserver", "(Lcom/ds/xedit/jni/IObservable;J)V" 
    },
    {
      "SwigDirector_IObservable_deleteAllObservers", "(Lcom/ds/xedit/jni/IObservable;)V" 
    },
    {
      "SwigDirector_IObservable_getObserverCount", "(Lcom/ds/xedit/jni/IObservable;)I" 
    },
    {
      "SwigDirector_IObservable_getObserver", "(Lcom/ds/xedit/jni/IObservable;I)J" 
    },
    {
      "SwigDirector_IObservable_notifyAllObservers", "(Lcom/ds/xedit/jni/IObservable;)V" 
    },
    {
      "SwigDirector_IOutputStream_write", "(Lcom/ds/xedit/jni/IOutputStream;JI)I" 
    },
    {
      "SwigDirector_IOutputStream_flush", "(Lcom/ds/xedit/jni/IOutputStream;)I" 
    },
    {
      "SwigDirector_IOutputStream_close", "(Lcom/ds/xedit/jni/IOutputStream;)I" 
    },
    {
      "SwigDirector_IOutputStream_seek", "(Lcom/ds/xedit/jni/IOutputStream;J)J" 
    },
    {
      "SwigDirector_IGenerateObserver_onFinish", "(Lcom/ds/xedit/jni/IGenerateObserver;JI)V" 
    },
    {
      "SwigDirector_IGenerateObserver_onUpdateProcess", "(Lcom/ds/xedit/jni/IGenerateObserver;JJ)V" 
    },
    {
      "SwigDirector_IClip_getId", "(Lcom/ds/xedit/jni/IClip;)J" 
    },
    {
      "SwigDirector_IClip_getType", "(Lcom/ds/xedit/jni/IClip;)I" 
    },
    {
      "SwigDirector_IClip_getRefMediaId", "(Lcom/ds/xedit/jni/IClip;)J" 
    },
    {
      "SwigDirector_IClip_getOffsetOnTrack", "(Lcom/ds/xedit/jni/IClip;)J" 
    },
    {
      "SwigDirector_IClip_getDuration", "(Lcom/ds/xedit/jni/IClip;)J" 
    },
    {
      "SwigDirector_IClip_getOffsetInMedia", "(Lcom/ds/xedit/jni/IClip;)J" 
    },
    {
      "SwigDirector_IMedia_getId", "(Lcom/ds/xedit/jni/IMedia;)J" 
    },
    {
      "SwigDirector_IMedia_getPath", "(Lcom/ds/xedit/jni/IMedia;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_IMedia_getMediaType", "(Lcom/ds/xedit/jni/IMedia;)I" 
    },
    {
      "SwigDirector_IMedia_newClip__SWIG_0", "(Lcom/ds/xedit/jni/IMedia;)J" 
    },
    {
      "SwigDirector_IMedia_newClip__SWIG_1", "(Lcom/ds/xedit/jni/IMedia;J)J" 
    },
    {
      "SwigDirector_IMedia_getPreview", "(Lcom/ds/xedit/jni/IMedia;)J" 
    },
    {
      "SwigDirector_ITimeLineObserver_onPosDidChanged", "(Lcom/ds/xedit/jni/ITimeLineObserver;J)V" 
    },
    {
      "SwigDirector_ITimeLineObserver_onTrackCreated", "(Lcom/ds/xedit/jni/ITimeLineObserver;J)V" 
    },
    {
      "SwigDirector_ITimeLineObserver_onTrackRemoved", "(Lcom/ds/xedit/jni/ITimeLineObserver;J)V" 
    },
    {
      "SwigDirector_ITimeLineObserver_onTimeLineStatusChanged", "(Lcom/ds/xedit/jni/ITimeLineObserver;I)V" 
    }
  };
  Swig::jclass_xeditJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_xeditJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

