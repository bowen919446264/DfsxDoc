/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.ds.xedit.jni;

public class AudioStream extends BaseAVStream {
  private transient long swigCPtr;

  protected AudioStream(long cPtr, boolean cMemoryOwn) {
    super(xeditJNI.AudioStream_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AudioStream obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        xeditJNI.delete_AudioStream(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public void setESampleFmt(ESampleFormat value) {
    xeditJNI.AudioStream_eSampleFmt_set(swigCPtr, this, value.swigValue());
  }

  public ESampleFormat getESampleFmt() {
    return ESampleFormat.swigToEnum(xeditJNI.AudioStream_eSampleFmt_get(swigCPtr, this));
  }

  public void setNSampleRate(int value) {
    xeditJNI.AudioStream_nSampleRate_set(swigCPtr, this, value);
  }

  public int getNSampleRate() {
    return xeditJNI.AudioStream_nSampleRate_get(swigCPtr, this);
  }

  public void setNBitsPerSample(int value) {
    xeditJNI.AudioStream_nBitsPerSample_set(swigCPtr, this, value);
  }

  public int getNBitsPerSample() {
    return xeditJNI.AudioStream_nBitsPerSample_get(swigCPtr, this);
  }

  public void setNChannels(int value) {
    xeditJNI.AudioStream_nChannels_set(swigCPtr, this, value);
  }

  public int getNChannels() {
    return xeditJNI.AudioStream_nChannels_get(swigCPtr, this);
  }

  public void setNChannelLayout(int value) {
    xeditJNI.AudioStream_nChannelLayout_set(swigCPtr, this, value);
  }

  public int getNChannelLayout() {
    return xeditJNI.AudioStream_nChannelLayout_get(swigCPtr, this);
  }

  public void setBLossless(boolean value) {
    xeditJNI.AudioStream_bLossless_set(swigCPtr, this, value);
  }

  public boolean getBLossless() {
    return xeditJNI.AudioStream_bLossless_get(swigCPtr, this);
  }

  public void setReserved(String value) {
    xeditJNI.AudioStream_reserved_set(swigCPtr, this, value);
  }

  public String getReserved() {
    return xeditJNI.AudioStream_reserved_get(swigCPtr, this);
  }

  protected static long[] cArrayUnwrap(AudioStream[] arrayWrapper) {
      long[] cArray = new long[arrayWrapper.length];
      for (int i=0; i<arrayWrapper.length; i++)
        cArray[i] = AudioStream.getCPtr(arrayWrapper[i]);
      return cArray;
  }

  protected static AudioStream[] cArrayWrap(long[] cArray, boolean cMemoryOwn) {
    AudioStream[] arrayWrapper = new AudioStream[cArray.length];
    for (int i=0; i<cArray.length; i++)
      arrayWrapper[i] = new AudioStream(cArray[i], cMemoryOwn);
    return arrayWrapper;
  }

  public AudioStream() {
    this(xeditJNI.new_AudioStream(), true);
  }

}
