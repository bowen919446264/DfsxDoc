/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.ds.xedit.jni;

public class IAFrame extends IFrame {
  private transient long swigCPtr;

  protected IAFrame(long cPtr, boolean cMemoryOwn) {
    super(xeditJNI.IAFrame_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IAFrame obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        xeditJNI.delete_IAFrame(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public int Init(ESampleFormat eSampleFmt, int nSampleRate, int nChannels, int nBitsPerSample, int nMaxSampleCount) {
    return xeditJNI.IAFrame_Init(swigCPtr, this, eSampleFmt.swigValue(), nSampleRate, nChannels, nBitsPerSample, nMaxSampleCount);
  }

  public ESampleFormat GetSampleFormat() {
    return ESampleFormat.swigToEnum(xeditJNI.IAFrame_GetSampleFormat(swigCPtr, this));
  }

  public int GetSampleRate() {
    return xeditJNI.IAFrame_GetSampleRate(swigCPtr, this);
  }

  public int GetChannels() {
    return xeditJNI.IAFrame_GetChannels(swigCPtr, this);
  }

  public int GetBitsPerSample() {
    return xeditJNI.IAFrame_GetBitsPerSample(swigCPtr, this);
  }

  public int GetSampleCount() {
    return xeditJNI.IAFrame_GetSampleCount(swigCPtr, this);
  }

  public SWIGTYPE_p_void GetSampleData() {
    long cPtr = xeditJNI.IAFrame_GetSampleData(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public int SetSampleCount(int nSampleCount) {
    return xeditJNI.IAFrame_SetSampleCount(swigCPtr, this, nSampleCount);
  }

}
